<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="publictransportationscheduler__test_8cpp" kind="file" language="C++">
    <compoundname>publictransportationscheduler_test.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="yes">publictransportationscheduler.h</includes>
    <includes local="yes">../../publictransportationscheduler/src/publictransportationscheduler.cpp</includes>
    <incdepgraph>
      <node id="4">
        <label>../../publictransportationscheduler/src/publictransportationscheduler.cpp</label>
      </node>
      <node id="1">
        <label>src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp</label>
        <link refid="publictransportationscheduler__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
      <node id="3">
        <label>publictransportationscheduler.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_public_transportation_scheduler_test" prot="public">PublicTransportationSchedulerTest</innerclass>
    <innerclass refid="class_public_transportation_scheduler_structs_test" prot="public">PublicTransportationSchedulerStructsTest</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestGlobalDefinitionsInitialization)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestGlobalDefinitionsInitialization</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="34" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="34" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a86221338d256a6ed91a933d84a6da5ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestAddUserToHashTable)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestAddUserToHashTable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="49" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a780fe08082ea8ae3bf23e7f314b20e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(GlobalDefinitionsTest, TestScheduleDatabase)</argsstring>
        <name>TEST</name>
        <param>
          <type>GlobalDefinitionsTest</type>
        </param>
        <param>
          <type>TestScheduleDatabase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="78" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="78" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a8088738e4ca2abaa416109eae6521373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(GlobalDefinitionsTest, TestSalesDatabase)</argsstring>
        <name>TEST</name>
        <param>
          <type>GlobalDefinitionsTest</type>
        </param>
        <param>
          <type>TestSalesDatabase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="91" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="91" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a68a9ef243c867c6564afc70bf5a7a178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(GlobalDefinitionsTest, TestVendorDatabase)</argsstring>
        <name>TEST</name>
        <param>
          <type>GlobalDefinitionsTest</type>
        </param>
        <param>
          <type>TestVendorDatabase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="106" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="106" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1adc66f7187077d53921dc6ca4a51cc202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(GlobalDefinitionsTest, TestSponsorDatabase)</argsstring>
        <name>TEST</name>
        <param>
          <type>GlobalDefinitionsTest</type>
        </param>
        <param>
          <type>TestSponsorDatabase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="119" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="119" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a3b83e42633b3507eac7e2fafb95afac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(GlobalDefinitionsTest, TestRouteListHead)</argsstring>
        <name>TEST</name>
        <param>
          <type>GlobalDefinitionsTest</type>
        </param>
        <param>
          <type>TestRouteListHead</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="133" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="133" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a63fa636338250d6972b901a34a7e4be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HashTableTest, TestAddUserToHashTable)</argsstring>
        <name>TEST</name>
        <param>
          <type>HashTableTest</type>
        </param>
        <param>
          <type>TestAddUserToHashTable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="153" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="153" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a50815bcfae29e7e703127d038707f7ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HashTableTest, TestUserNotInHashTable)</argsstring>
        <name>TEST</name>
        <param>
          <type>HashTableTest</type>
        </param>
        <param>
          <type>TestUserNotInHashTable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="168" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a9615fc1cd0d79ffd968805e7fc549952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RouteStructTest, TestRouteCreation)</argsstring>
        <name>TEST</name>
        <param>
          <type>RouteStructTest</type>
        </param>
        <param>
          <type>TestRouteCreation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="175" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="175" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a94527c5cd083e7f17ea7e63c7234207e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StackTest, TestPushAndPop)</argsstring>
        <name>TEST</name>
        <param>
          <type>StackTest</type>
        </param>
        <param>
          <type>TestPushAndPop</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="186" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="186" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1adaeba1a8127d53f9fc95893d3768b655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(QueueTest, TestEnqueueAndDequeue)</argsstring>
        <name>TEST</name>
        <param>
          <type>QueueTest</type>
        </param>
        <param>
          <type>TestEnqueueAndDequeue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="208" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="208" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1aa603cc8760197323062ed5e32ad032cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HeapTest, TestInsertAndExtractMin)</argsstring>
        <name>TEST</name>
        <param>
          <type>HeapTest</type>
        </param>
        <param>
          <type>TestInsertAndExtractMin</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="232" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="232" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1aff2ed19a0d264a1c85dd4ac23d7fd56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerStructTest, TestUserStruct)</argsstring>
        <name>TEST</name>
        <param>
          <type>PublicTransportationSchedulerStructTest</type>
        </param>
        <param>
          <type>TestUserStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="264" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="264" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1add5da061d3e4d7a56992854769c2f093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerStructTest, TestBandStruct)</argsstring>
        <name>TEST</name>
        <param>
          <type>PublicTransportationSchedulerStructTest</type>
        </param>
        <param>
          <type>TestBandStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="273" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="273" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1aa86aa12f5d92c212b1206c27b77ea6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerStructTest, TestScheduleNodeStruct)</argsstring>
        <name>TEST</name>
        <param>
          <type>PublicTransportationSchedulerStructTest</type>
        </param>
        <param>
          <type>TestScheduleNodeStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="280" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="280" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a6ec32087d3b6b37126f9595ea9ee65be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerStructTest, TestTicketSaleStruct)</argsstring>
        <name>TEST</name>
        <param>
          <type>PublicTransportationSchedulerStructTest</type>
        </param>
        <param>
          <type>TestTicketSaleStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="292" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="292" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1ad4f72ccb31c62f6c5589769537e47098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerStructTest, TestVendorStruct)</argsstring>
        <name>TEST</name>
        <param>
          <type>PublicTransportationSchedulerStructTest</type>
        </param>
        <param>
          <type>TestVendorStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="301" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="301" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a520aad0750ec6bb72f978b148ae5f886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerStructTest, TestDoubleNodeStruct)</argsstring>
        <name>TEST</name>
        <param>
          <type>PublicTransportationSchedulerStructTest</type>
        </param>
        <param>
          <type>TestDoubleNodeStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="314" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="314" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1abf06f14760414835908100375488f8b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerStructTest, TestXORNodeStruct)</argsstring>
        <name>TEST</name>
        <param>
          <type>PublicTransportationSchedulerStructTest</type>
        </param>
        <param>
          <type>TestXORNodeStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="326" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="326" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1ab70a806f979c9f663afbd915e7977205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerStructTest, TestSparseMatrixNodeStruct)</argsstring>
        <name>TEST</name>
        <param>
          <type>PublicTransportationSchedulerStructTest</type>
        </param>
        <param>
          <type>TestSparseMatrixNodeStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="339" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="339" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1ab015f43177bec977af71de507172dce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestEditBand)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestEditBand</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="350" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="350" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a76b81301834000d8d4eaf809ca23e25d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerStructTest, TestSponsorStruct)</argsstring>
        <name>TEST</name>
        <param>
          <type>PublicTransportationSchedulerStructTest</type>
        </param>
        <param>
          <type>TestSponsorStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="359" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="359" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a282c526f369979195be08c71a6342fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestAddAndFindRoute)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestAddAndFindRoute</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="379" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="379" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1aa55b284a0621f6101766cbbcd02a9814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestInsertXORNode)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestInsertXORNode</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="395" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="395" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a0da77d1554025a9796d809936ad0d648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestInsertSparseNode)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestInsertSparseNode</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="404" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="404" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1ad1b2fb223fb81a7fd8114c40ae62d9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestStackOperations)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestStackOperations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="413" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="413" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a4e033798c9ba6efc0c6d2de99397adab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestQueueOperations)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestQueueOperations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="422" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="422" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a57635f973c7496829a0c76a2626f92e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestHeapOperations)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestHeapOperations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="431" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="431" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a1b4d2eee97ce6ce7e76dc28a74de5017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestScheduleManagement)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestScheduleManagement</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="444" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="444" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a2241949545282bf8a03c715f6c0defca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestVendorAndSponsorManagement)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestVendorAndSponsorManagement</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="456" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="456" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a1fee149e483af5072c04e80628bb6a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestBPlusTreeOperations)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestBPlusTreeOperations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="466" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="466" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a003e0c9d88d5fc0fb6bb8ac2420300f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestGenerateSalesReport)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestGenerateSalesReport</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="478" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="478" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestUserCreation)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestUserCreation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="509" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="509" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1afbff1394049fa9ca2604ed71c1c3a3a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestBandCreation)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestBandCreation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="518" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="518" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a734dc47db66714737a06379b40ae14ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestScheduleNodeCreationAndLinking)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestScheduleNodeCreationAndLinking</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="525" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="525" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a080b6aa2f76f39dd080c1450e6d93897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestTicketSaleCreation)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestTicketSaleCreation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="537" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="537" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1ac5c2c9c9ae4460f92adc0b13f1bb0e7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestVendorCreationAndLinking)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestVendorCreationAndLinking</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="546" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="546" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a41c6eaa1a2f91362c6a9fc24cccacdd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestSponsorCreationAndLinking)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestSponsorCreationAndLinking</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="558" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="558" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a6fe0acaeb2dcc9bc50b81f12b03dfd67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestDoubleNodeCreationAndLinking)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestDoubleNodeCreationAndLinking</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="570" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="570" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a0e4e29770fc1bbdd2bcb8d814adb116c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestXORNodeCreationAndLinking)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestXORNodeCreationAndLinking</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="581" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="581" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1ab34cb6479493cfd5536dee13f8aedf6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestSparseMatrixNodeCreationAndLinking)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestSparseMatrixNodeCreationAndLinking</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="593" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="593" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1ae8d9e91f71b1de8ee55f2bd229e65ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestNodeStackAndQueueOperations)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestNodeStackAndQueueOperations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="604" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="604" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1a84026c09f46ffef8b33db84088f9f808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PublicTransportationSchedulerStructsTest, TestBPlusTreeNodeCreation)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref></type>
        </param>
        <param>
          <type>TestBPlusTreeNodeCreation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="626" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="626" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler__test_8cpp_1abb5b7ee9a19c831976924f441e9168a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PublicTransportationSchedulerTest, TestCompleteFlow)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref></type>
        </param>
        <param>
          <type>TestCompleteFlow</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" line="641" column="1" bodyfile="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp" bodystart="641" bodyend="646"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;publictransportationscheduler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../publictransportationscheduler/src/publictransportationscheduler.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>class<sp/>setup<sp/>for<sp/>main<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="class_public_transportation_scheduler_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8" refid="class_public_transportation_scheduler_test_1a5d9a9e52973a2cf7cffe65bbace19c79" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_public_transportation_scheduler_test_1a5d9a9e52973a2cf7cffe65bbace19c79" kindref="member">SetUp</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>initializeHashTable();</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>vendorListHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>sponsorListHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>scheduleHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>routeListHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>root<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>userCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>bandCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>loadBandDatabase();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>scheduleCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>salesCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>vendorCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>sponsorCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(bandDatabase,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bandDatabase));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="class_public_transportation_scheduler_test_1a3fcd01a862e53e43345a60379fc03861" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_public_transportation_scheduler_test_1a3fcd01a862e53e43345a60379fc03861" kindref="member">TearDown</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>routeListHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>scheduleHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>vendorListHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>sponsorListHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>root<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestGlobalDefinitionsInitialization)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>EXPECT_EQ(userCount,<sp/>0);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bandCount,<sp/>0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>EXPECT_EQ(scheduleCount,<sp/>0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>EXPECT_EQ(salesCount,<sp/>0);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>EXPECT_EQ(vendorCount,<sp/>0);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>EXPECT_EQ(sponsorCount,<sp/>0);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>EXPECT_EQ(routeListHead,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heapSize,<sp/>0);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>TABLE_SIZE;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(hashTable[i],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="publictransportationscheduler__test_8cpp_1a86221338d256a6ed91a933d84a6da5ed" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestAddUserToHashTable)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>addUserToHashTable(</highlight><highlight class="stringliteral">&quot;testuser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;password123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>hashFunction(</highlight><highlight class="stringliteral">&quot;testuser&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>ASSERT_NE(hashTable[index],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(hashTable[index]-&gt;username,<sp/></highlight><highlight class="stringliteral">&quot;testuser&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(hashTable[index]-&gt;password,<sp/></highlight><highlight class="stringliteral">&quot;password123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>Definitions<sp/>Testleri</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//TEST(GlobalDefinitionsTest,<sp/>TestUserDatabase)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Kullanıcı<sp/>ekleme<sp/>işlemi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>strcpy(userDatabase[userCount].username,<sp/>&quot;testuser&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>strcpy(userDatabase[userCount].password,<sp/>&quot;testpass&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>userCount++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Doğru<sp/>kaydedilip<sp/>kaydedilmediğini<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>EXPECT_EQ(userCount,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>EXPECT_STREQ(userDatabase[0].username,<sp/>&quot;testuser&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>EXPECT_STREQ(userDatabase[0].password,<sp/>&quot;testpass&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//TEST(GlobalDefinitionsTest,<sp/>TestBandDatabase)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Band<sp/>ekleme<sp/>işlemi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>strcpy(bandDatabase[bandCount].name,<sp/>&quot;Test<sp/>Band&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>bandCount++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>Doğru<sp/>kaydedilip<sp/>kaydedilmediğini<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>EXPECT_EQ(bandCount,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>EXPECT_STREQ(bandDatabase[0].name,<sp/>&quot;Test<sp/>Band&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="publictransportationscheduler__test_8cpp_1a780fe08082ea8ae3bf23e7f314b20e1e" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(GlobalDefinitionsTest,<sp/>TestScheduleDatabase)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Program<sp/>ekleme<sp/>işlemi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>scheduleDatabase[scheduleCount].scheduleID<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>strcpy(scheduleDatabase[scheduleCount].bandName,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>strcpy(scheduleDatabase[scheduleCount].date,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-10&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>scheduleCount++;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Doğru<sp/>kaydedilip<sp/>kaydedilmediğini<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>EXPECT_EQ(scheduleCount,<sp/>1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>EXPECT_EQ(scheduleDatabase[0].scheduleID,<sp/>1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(scheduleDatabase[0].bandName,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(scheduleDatabase[0].date,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-10&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="publictransportationscheduler__test_8cpp_1a8088738e4ca2abaa416109eae6521373" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(GlobalDefinitionsTest,<sp/>TestSalesDatabase)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Satış<sp/>ekleme<sp/>işlemi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>salesDatabase[salesCount].saleID<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>strcpy(salesDatabase[salesCount].ticketType,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>salesDatabase[salesCount].amount<sp/>=<sp/>50.0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>strcpy(salesDatabase[salesCount].date,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-01&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>salesCount++;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Doğru<sp/>kaydedilip<sp/>kaydedilmediğini<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>EXPECT_EQ(salesCount,<sp/>1);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>EXPECT_EQ(salesDatabase[0].saleID,<sp/>1);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(salesDatabase[0].ticketType,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(salesDatabase[0].amount,<sp/>50.0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(salesDatabase[0].date,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-01&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="publictransportationscheduler__test_8cpp_1a68a9ef243c867c6564afc70bf5a7a178" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(GlobalDefinitionsTest,<sp/>TestVendorDatabase)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tedarikçi<sp/>ekleme<sp/>işlemi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>vendorDatabase[vendorCount].id<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>strcpy(vendorDatabase[vendorCount].name,<sp/></highlight><highlight class="stringliteral">&quot;Vendor<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>strcpy(vendorDatabase[vendorCount].serviceType,<sp/></highlight><highlight class="stringliteral">&quot;Food&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>vendorCount++;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Doğru<sp/>kaydedilip<sp/>kaydedilmediğini<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>EXPECT_EQ(vendorCount,<sp/>1);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>EXPECT_EQ(vendorDatabase[0].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(vendorDatabase[0].name,<sp/></highlight><highlight class="stringliteral">&quot;Vendor<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(vendorDatabase[0].serviceType,<sp/></highlight><highlight class="stringliteral">&quot;Food&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="publictransportationscheduler__test_8cpp_1adc66f7187077d53921dc6ca4a51cc202" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(GlobalDefinitionsTest,<sp/>TestSponsorDatabase)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sponsor<sp/>ekleme<sp/>işlemi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>sponsorDatabase[sponsorCount].id<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>strcpy(sponsorDatabase[sponsorCount].name,<sp/></highlight><highlight class="stringliteral">&quot;Sponsor<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>sponsorDatabase[sponsorCount].contributionAmount<sp/>=<sp/>1000.0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>sponsorCount++;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Doğru<sp/>kaydedilip<sp/>kaydedilmediğini<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>EXPECT_EQ(sponsorCount,<sp/>1);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>EXPECT_EQ(sponsorDatabase[0].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(sponsorDatabase[0].name,<sp/></highlight><highlight class="stringliteral">&quot;Sponsor<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(sponsorDatabase[0].contributionAmount,<sp/>1000.0);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Route<sp/>Linked<sp/>List<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="publictransportationscheduler__test_8cpp_1a3b83e42633b3507eac7e2fafb95afac0" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(GlobalDefinitionsTest,<sp/>TestRouteListHead)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Yeni<sp/>rota<sp/>ekleme</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>DoubleNode*<sp/>newRoute<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DoubleNode;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>newRoute-&gt;data<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>strcpy(newRoute-&gt;routeName,<sp/></highlight><highlight class="stringliteral">&quot;Route<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>strcpy(newRoute-&gt;startPoint,<sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>Point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>strcpy(newRoute-&gt;endPoint,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>Point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>newRoute-&gt;next<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>newRoute-&gt;prev<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>routeListHead<sp/>=<sp/>newRoute;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Doğru<sp/>eklenip<sp/>eklenmediğini<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>ASSERT_NE(routeListHead,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>EXPECT_EQ(routeListHead-&gt;data,<sp/>1);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(routeListHead-&gt;routeName,<sp/></highlight><highlight class="stringliteral">&quot;Route<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(routeListHead-&gt;startPoint,<sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>Point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(routeListHead-&gt;endPoint,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>Point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>newRoute;<sp/><sp/></highlight><highlight class="comment">//<sp/>Hafıza<sp/>sızıntısını<sp/>önlemek<sp/>için<sp/>serbest<sp/>bırakın</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hash<sp/>Table<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="publictransportationscheduler__test_8cpp_1a63fa636338250d6972b901a34a7e4be6" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(HashTableTest,<sp/>TestAddUserToHashTable)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Hash<sp/>tablosunda<sp/>bir<sp/>kullanıcı<sp/>ekleyin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>User*<sp/>user<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>User;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>strcpy(user-&gt;username,<sp/></highlight><highlight class="stringliteral">&quot;testuser&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>strcpy(user-&gt;password,<sp/></highlight><highlight class="stringliteral">&quot;testpass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Hash<sp/>tablosuna<sp/>kullanıcıyı<sp/>ekleyin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashIndex<sp/>=<sp/>hashFunction(user-&gt;username);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>hashTable[hashIndex]<sp/>=<sp/>user;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Kullanıcının<sp/>doğru<sp/>şekilde<sp/>eklendiğini<sp/>kontrol<sp/>edin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>ASSERT_NE(hashTable[hashIndex],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(hashTable[hashIndex]-&gt;username,<sp/></highlight><highlight class="stringliteral">&quot;testuser&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(hashTable[hashIndex]-&gt;password,<sp/></highlight><highlight class="stringliteral">&quot;testpass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>user;<sp/><sp/></highlight><highlight class="comment">//<sp/>Bellek<sp/>sızıntısını<sp/>önlemek<sp/>için<sp/>kullanıcıyı<sp/>serbest<sp/>bırakın</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="publictransportationscheduler__test_8cpp_1a50815bcfae29e7e703127d038707f7ab" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(HashTableTest,<sp/>TestUserNotInHashTable)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Var<sp/>olmayan<sp/>bir<sp/>kullanıcıyı<sp/>kontrol<sp/>edin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashIndex<sp/>=<sp/>hashFunction(</highlight><highlight class="stringliteral">&quot;nonexistent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>EXPECT_EQ(hashTable[hashIndex],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Route<sp/>Struct<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="publictransportationscheduler__test_8cpp_1a9615fc1cd0d79ffd968805e7fc549952" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(RouteStructTest,<sp/>TestRouteCreation)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bir<sp/>route<sp/>nesnesi<sp/>oluşturun<sp/>ve<sp/>alanları<sp/>doldurun</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>Route<sp/>route;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>route.routeID<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>strcpy(route.routeName,<sp/></highlight><highlight class="stringliteral">&quot;Main<sp/>Route&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Route<sp/>bilgilerini<sp/>doğrulayın</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>EXPECT_EQ(route.routeID,<sp/>1);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(route.routeName,<sp/></highlight><highlight class="stringliteral">&quot;Main<sp/>Route&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stack<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="publictransportationscheduler__test_8cpp_1a94527c5cd083e7f17ea7e63c7234207e" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(StackTest,<sp/>TestPushAndPop)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>İlk<sp/>olarak<sp/>stack&apos;in<sp/>boş<sp/>olduğunu<sp/>doğrula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>EXPECT_EQ(stack,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stack&apos;e<sp/>bir<sp/>eleman<sp/>ekle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>push(10);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>EXPECT_NE(stack,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Stack&apos;in<sp/>boş<sp/>olmadığını<sp/>doğrula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>EXPECT_EQ(stack-&gt;data,<sp/>10);<sp/></highlight><highlight class="comment">//<sp/>Eklenen<sp/>ilk<sp/>elemanın<sp/>doğru<sp/>olduğunu<sp/>doğrula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stack&apos;e<sp/>başka<sp/>bir<sp/>eleman<sp/>daha<sp/>ekle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>push(20);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>EXPECT_EQ(stack-&gt;data,<sp/>20);<sp/></highlight><highlight class="comment">//<sp/>Son<sp/>eklenen<sp/>elemanın<sp/>en<sp/>üstte<sp/>olduğunu<sp/>doğrula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>İlk<sp/>elemanı<sp/>çıkar<sp/>ve<sp/>değerini<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poppedValue<sp/>=<sp/>pop();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>EXPECT_EQ(poppedValue,<sp/>20);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>İkinci<sp/>elemanı<sp/>da<sp/>çıkar<sp/>ve<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>poppedValue<sp/>=<sp/>pop();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>EXPECT_EQ(poppedValue,<sp/>10);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stack<sp/>boş<sp/>olmalı,<sp/>dolayısıyla<sp/>-1<sp/>döndürmeli</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>poppedValue<sp/>=<sp/>pop();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>EXPECT_EQ(poppedValue,<sp/>-1);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Queue<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="publictransportationscheduler__test_8cpp_1adaeba1a8127d53f9fc95893d3768b655" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(QueueTest,<sp/>TestEnqueueAndDequeue)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>İlk<sp/>olarak<sp/>queue&apos;nun<sp/>boş<sp/>olduğunu<sp/>doğrula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>EXPECT_EQ(queueFront,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>EXPECT_EQ(queueRear,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue&apos;ya<sp/>eleman<sp/>ekle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>enqueue(30);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>EXPECT_NE(queueFront,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Queue&apos;nun<sp/>boş<sp/>olmadığını<sp/>doğrula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>EXPECT_NE(queueRear,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>EXPECT_EQ(queueFront-&gt;data,<sp/>30);<sp/></highlight><highlight class="comment">//<sp/>İlk<sp/>elemanın<sp/>doğru<sp/>olduğunu<sp/>doğrula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue&apos;ya<sp/>başka<sp/>bir<sp/>eleman<sp/>daha<sp/>ekle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>enqueue(40);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>EXPECT_EQ(queueRear-&gt;data,<sp/>40);<sp/><sp/></highlight><highlight class="comment">//<sp/>Son<sp/>eklenen<sp/>elemanın<sp/>kuyrukta<sp/>olduğunu<sp/>doğrula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>İlk<sp/>elemanı<sp/>çıkar<sp/>ve<sp/>değerini<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dequeuedValue<sp/>=<sp/>dequeue();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>EXPECT_EQ(dequeuedValue,<sp/>30);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>İkinci<sp/>elemanı<sp/>da<sp/>çıkar<sp/>ve<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>dequeuedValue<sp/>=<sp/>dequeue();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>EXPECT_EQ(dequeuedValue,<sp/>40);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>boş<sp/>olmalı,<sp/>dolayısıyla<sp/>-1<sp/>döndürmeli</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>dequeuedValue<sp/>=<sp/>dequeue();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>EXPECT_EQ(dequeuedValue,<sp/>-1);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Priority<sp/>Queue<sp/>(Heap)<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="publictransportationscheduler__test_8cpp_1aa603cc8760197323062ed5e32ad032cd" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(HeapTest,<sp/>TestInsertAndExtractMin)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Başlangıçta<sp/>heap<sp/>boş<sp/>olmalı</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heapSize,<sp/>0);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Heap&apos;e<sp/>eleman<sp/>ekle<sp/>ve<sp/>boyutu<sp/>kontrol<sp/>et</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>insertHeap(50);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heapSize,<sp/>1);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heap[0],<sp/>50);<sp/><sp/></highlight><highlight class="comment">//<sp/>Eklenen<sp/>ilk<sp/>elemanın<sp/>minimum<sp/>olduğunu<sp/>doğrula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Başka<sp/>elemanlar<sp/>ekle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>insertHeap(30);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heapSize,<sp/>2);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heap[0],<sp/>30);<sp/><sp/></highlight><highlight class="comment">//<sp/>En<sp/>küçük<sp/>eleman<sp/>güncellenmeli</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>insertHeap(40);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heapSize,<sp/>3);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heap[0],<sp/>30);<sp/><sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>eleman<sp/>hala<sp/>30<sp/>olmalı</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>elemanı<sp/>çıkar<sp/>ve<sp/>doğru<sp/>değeri<sp/>döndürdüğünü<sp/>doğrula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minVal<sp/>=<sp/>extractMin();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>EXPECT_EQ(minVal,<sp/>30);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heapSize,<sp/>2);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sonraki<sp/>minimum<sp/>elemanı<sp/>çıkar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>minVal<sp/>=<sp/>extractMin();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>EXPECT_EQ(minVal,<sp/>40);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heapSize,<sp/>1);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Kalan<sp/>elemanı<sp/>çıkar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>minVal<sp/>=<sp/>extractMin();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>EXPECT_EQ(minVal,<sp/>50);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>EXPECT_EQ(heapSize,<sp/>0);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Heap<sp/>boş<sp/>olmalı,<sp/>bu<sp/>yüzden<sp/>-1<sp/>döndürmeli</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>minVal<sp/>=<sp/>extractMin();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>EXPECT_EQ(minVal,<sp/>-1);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>User<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="publictransportationscheduler__test_8cpp_1aff2ed19a0d264a1c85dd4ac23d7fd56e" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(PublicTransportationSchedulerStructTest,<sp/>TestUserStruct)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>User<sp/>user;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>strcpy(user.username,<sp/></highlight><highlight class="stringliteral">&quot;testuser&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>strcpy(user.password,<sp/></highlight><highlight class="stringliteral">&quot;password&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(user.username,<sp/></highlight><highlight class="stringliteral">&quot;testuser&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(user.password,<sp/></highlight><highlight class="stringliteral">&quot;password&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>Band<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="publictransportationscheduler__test_8cpp_1add5da061d3e4d7a56992854769c2f093" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(PublicTransportationSchedulerStructTest,<sp/>TestBandStruct)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>Band<sp/>band;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>strcpy(band.name,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>Band&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(band.name,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>Band&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>ScheduleNode<sp/>struct<sp/>creation<sp/>and<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="publictransportationscheduler__test_8cpp_1aa86aa12f5d92c212b1206c27b77ea6ac" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(PublicTransportationSchedulerStructTest,<sp/>TestScheduleNodeStruct)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>ScheduleNode*<sp/>node1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ScheduleNode{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2024-12-01&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>ScheduleNode*<sp/>node2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ScheduleNode{<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2024-12-02&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>node1<sp/>};</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>node1-&gt;next<sp/>=<sp/>node2;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;scheduleID,<sp/>1);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(node1-&gt;bandName,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;next,<sp/>node2);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node1;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node2;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>TicketSale<sp/>struct<sp/>creation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="publictransportationscheduler__test_8cpp_1a6ec32087d3b6b37126f9595ea9ee65be" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(PublicTransportationSchedulerStructTest,<sp/>TestTicketSaleStruct)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>TicketSale<sp/>sale<sp/>=<sp/>{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">,<sp/>50.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-01&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>EXPECT_EQ(sale.saleID,<sp/>1);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(sale.ticketType,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(sale.amount,<sp/>50.0);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(sale.date,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-01&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>Vendor<sp/>struct<sp/>creation<sp/>and<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="publictransportationscheduler__test_8cpp_1ad4f72ccb31c62f6c5589769537e47098" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(PublicTransportationSchedulerStructTest,<sp/>TestVendorStruct)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>Vendor*<sp/>vendor1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vendor{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Vendor<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Food&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>Vendor*<sp/>vendor2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vendor{<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Vendor<sp/>B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Drink&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>vendor1-&gt;next<sp/>=<sp/>vendor2;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>EXPECT_EQ(vendor1-&gt;id,<sp/>1);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(vendor1-&gt;name,<sp/></highlight><highlight class="stringliteral">&quot;Vendor<sp/>A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(vendor1-&gt;serviceType,<sp/></highlight><highlight class="stringliteral">&quot;Food&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>EXPECT_EQ(vendor1-&gt;next,<sp/>vendor2);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>vendor1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>vendor2;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>DoubleNode<sp/>struct<sp/>for<sp/>route<sp/>creation<sp/>and<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="publictransportationscheduler__test_8cpp_1a520aad0750ec6bb72f978b148ae5f886" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(PublicTransportationSchedulerStructTest,<sp/>TestDoubleNodeStruct)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>DoubleNode*<sp/>node1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DoubleNode{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Route<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>DoubleNode*<sp/>node2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DoubleNode{<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Route<sp/>B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>node1<sp/>};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>node1-&gt;next<sp/>=<sp/>node2;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;data,<sp/>1);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(node1-&gt;routeName,<sp/></highlight><highlight class="stringliteral">&quot;Route<sp/>A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;next,<sp/>node2);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node1;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node2;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>XORNode<sp/>struct<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="publictransportationscheduler__test_8cpp_1abf06f14760414835908100375488f8b5" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(PublicTransportationSchedulerStructTest,<sp/>TestXORNodeStruct)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>XORNode*<sp/>node1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XORNode{<sp/>1,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>XORNode*<sp/>node2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XORNode{<sp/>2,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>node1-&gt;npx<sp/>=<sp/>node2;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>node2-&gt;npx<sp/>=<sp/>node1;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;data,<sp/>1);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;npx,<sp/>node2);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node2-&gt;npx,<sp/>node1);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node1;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node2;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>SparseMatrixNode<sp/>struct<sp/>creation<sp/>and<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="publictransportationscheduler__test_8cpp_1ab70a806f979c9f663afbd915e7977205" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(PublicTransportationSchedulerStructTest,<sp/>TestSparseMatrixNodeStruct)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>SparseMatrixNode*<sp/>node1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SparseMatrixNode{<sp/>0,<sp/>1,<sp/>5,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>SparseMatrixNode*<sp/>node2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SparseMatrixNode{<sp/>1,<sp/>2,<sp/>10,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>node1-&gt;next<sp/>=<sp/>node2;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;value,<sp/>5);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;next-&gt;value,<sp/>10);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node1;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node2;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Band<sp/>Management<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="publictransportationscheduler__test_8cpp_1ab015f43177bec977af71de507172dce5" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestEditBand)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>addBand(</highlight><highlight class="stringliteral">&quot;OldBand&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>editBand(</highlight><highlight class="stringliteral">&quot;OldBand&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;NewBand&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>BandDatabase&apos;in<sp/>ilk<sp/>elemanında<sp/>beklenen<sp/>ismi<sp/>doğrulayın</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>ASSERT_GT(bandCount,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>bandCount<sp/>sıfırdan<sp/>büyük<sp/>olmalı</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(bandDatabase[0].name,<sp/></highlight><highlight class="stringliteral">&quot;NewBand&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>Sponsor<sp/>struct<sp/>creation<sp/>and<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="publictransportationscheduler__test_8cpp_1a76b81301834000d8d4eaf809ca23e25d" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(PublicTransportationSchedulerStructTest,<sp/>TestSponsorStruct)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>Sponsor*<sp/>sponsor1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Sponsor{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Sponsor<sp/>A&quot;</highlight><highlight class="normal">,<sp/>1000.0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>Sponsor*<sp/>sponsor2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Sponsor{<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Sponsor<sp/>B&quot;</highlight><highlight class="normal">,<sp/>2000.0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>sponsor1-&gt;next<sp/>=<sp/>sponsor2;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>EXPECT_EQ(sponsor1-&gt;id,<sp/>1);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(sponsor1-&gt;name,<sp/></highlight><highlight class="stringliteral">&quot;Sponsor<sp/>A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(sponsor1-&gt;contributionAmount,<sp/>1000.0);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>EXPECT_EQ(sponsor1-&gt;next,<sp/>sponsor2);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>sponsor1;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>sponsor2;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>user<sp/>creation<sp/>and<sp/>hash<sp/>table<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//TEST(PublicTransportationSchedulerTest,<sp/>TestHashTableFunctions)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>addUserToHashTable(&quot;testuser&quot;,<sp/>&quot;testpass&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>EXPECT_EQ(verifyUserInHashTable(&quot;testuser&quot;,<sp/>&quot;testpass&quot;),<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>EXPECT_EQ(verifyUserInHashTable(&quot;nonexistent&quot;,<sp/>&quot;testpass&quot;),<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>adding<sp/>and<sp/>finding<sp/>a<sp/>route<sp/>in<sp/>double<sp/>linked<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="publictransportationscheduler__test_8cpp_1a282c526f369979195be08c71a6342fed" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestAddAndFindRoute)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>addRoute(1,<sp/></highlight><highlight class="stringliteral">&quot;Route1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Start1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>DoubleNode*<sp/>node<sp/>=<sp/>findDoubleNode(routeListHead,<sp/>1);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>ASSERT_NE(node,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;data,<sp/>1);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(node-&gt;routeName,<sp/></highlight><highlight class="stringliteral">&quot;Route1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>deleting<sp/>a<sp/>route</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//TEST_F(PublicTransportationSchedulerTest,<sp/>TestDeleteRoute)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>addRoute(1,<sp/>&quot;Route1&quot;,<sp/>&quot;Start1&quot;,<sp/>&quot;End1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>EXPECT_EQ(deleteDoubleNode(&amp;routeListHead,<sp/>1),<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>EXPECT_EQ(findDoubleNode(routeListHead,<sp/>1),<sp/>nullptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>XOR<sp/>linked<sp/>list<sp/>insertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="publictransportationscheduler__test_8cpp_1aa55b284a0621f6101766cbbcd02a9814" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestInsertXORNode)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>XORNode*<sp/>head<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>insertXORNode(&amp;head,<sp/>1);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>insertXORNode(&amp;head,<sp/>2);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>EXPECT_EQ(head-&gt;data,<sp/>2);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>EXPECT_EQ(head-&gt;npx-&gt;data,<sp/>1);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>inserting<sp/>a<sp/>node<sp/>in<sp/>sparse<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="publictransportationscheduler__test_8cpp_1a0da77d1554025a9796d809936ad0d648" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestInsertSparseNode)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>SparseMatrixNode*<sp/>head<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>insertSparseNode(&amp;head,<sp/>0,<sp/>1,<sp/>5);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>EXPECT_EQ(head-&gt;row,<sp/>0);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>EXPECT_EQ(head-&gt;col,<sp/>1);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>EXPECT_EQ(head-&gt;value,<sp/>5);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>stack<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="publictransportationscheduler__test_8cpp_1ad1b2fb223fb81a7fd8114c40ae62d9d1" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestStackOperations)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>push(10);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>push(20);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>EXPECT_EQ(pop(),<sp/>20);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>EXPECT_EQ(pop(),<sp/>10);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>EXPECT_EQ(pop(),<sp/>-1);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>queue<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="publictransportationscheduler__test_8cpp_1a4e033798c9ba6efc0c6d2de99397adab" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestQueueOperations)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>enqueue(30);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>enqueue(40);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>EXPECT_EQ(dequeue(),<sp/>30);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>EXPECT_EQ(dequeue(),<sp/>40);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>EXPECT_EQ(dequeue(),<sp/>-1);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>heap<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="publictransportationscheduler__test_8cpp_1a57635f973c7496829a0c76a2626f92e2" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestHeapOperations)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>insertHeap(30);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>insertHeap(10);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>insertHeap(20);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>EXPECT_EQ(extractMin(),<sp/>10);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>EXPECT_EQ(extractMin(),<sp/>20);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>EXPECT_EQ(extractMin(),<sp/>30);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>band<sp/>management<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>schedule<sp/>management<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="publictransportationscheduler__test_8cpp_1a1b4d2eee97ce6ce7e76dc28a74de5017" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestScheduleManagement)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>createSchedule(1,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-10&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>EXPECT_EQ(scheduleHead-&gt;scheduleID,<sp/>1);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(scheduleHead-&gt;bandName,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(scheduleHead-&gt;date,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-10&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>editSchedule(1,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-15&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(scheduleHead-&gt;bandName,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(scheduleHead-&gt;date,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-15&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>EXPECT_EQ(deleteSchedule(1),<sp/>1);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>vendor<sp/>and<sp/>sponsor<sp/>management</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="publictransportationscheduler__test_8cpp_1a2241949545282bf8a03c715f6c0defca" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestVendorAndSponsorManagement)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>addVendor(1,<sp/></highlight><highlight class="stringliteral">&quot;Vendor<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Food&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>EXPECT_EQ(vendorListHead-&gt;id,<sp/>1);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(vendorListHead-&gt;name,<sp/></highlight><highlight class="stringliteral">&quot;Vendor<sp/>A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>addSponsor(1,<sp/></highlight><highlight class="stringliteral">&quot;Sponsor<sp/>A&quot;</highlight><highlight class="normal">,<sp/>1000.0);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>EXPECT_EQ(sponsorListHead-&gt;id,<sp/>1);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(sponsorListHead-&gt;contributionAmount,<sp/>1000.0);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>B+<sp/>tree<sp/>operations<sp/>for<sp/>ticket<sp/>sales</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="publictransportationscheduler__test_8cpp_1a1fee149e483af5072c04e80628bb6a30" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestBPlusTreeOperations)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>TicketSale<sp/>sale1<sp/>=<sp/>{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">,<sp/>50.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-12-01&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>TicketSale<sp/>sale2<sp/>=<sp/>{<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Student&quot;</highlight><highlight class="normal">,<sp/>30.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-12-02&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>insertBPlusNode(sale1.saleID,<sp/>&amp;sale1);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>insertBPlusNode(sale2.saleID,<sp/>&amp;sale2);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>TicketSale*<sp/>foundSale<sp/>=<sp/>searchBPlusTree(1);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>ASSERT_NE(foundSale,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>EXPECT_EQ(foundSale-&gt;saleID,<sp/>1);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(foundSale-&gt;amount,<sp/>50.0);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generate<sp/>sales<sp/>report<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="publictransportationscheduler__test_8cpp_1a003e0c9d88d5fc0fb6bb8ac2420300f5" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestGenerateSalesReport)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>TicketSale<sp/>sale1<sp/>=<sp/>{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">,<sp/>50.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-12-01&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>TicketSale<sp/>sale2<sp/>=<sp/>{<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Student&quot;</highlight><highlight class="normal">,<sp/>30.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-12-02&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>insertBPlusNode(sale1.saleID,<sp/>&amp;sale1);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>insertBPlusNode(sale2.saleID,<sp/>&amp;sale2);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>testing::internal::CaptureStdout();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>generateSalesReport();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>std::string<sp/>output<sp/>=<sp/>testing::internal::GetCapturedStdout();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(output.find(</highlight><highlight class="stringliteral">&quot;Total<sp/>Sales<sp/>Amount&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Additional<sp/>tests<sp/>for<sp/>struct<sp/>creation<sp/>and<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="class_public_transportation_scheduler_structs_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="493" refid="class_public_transportation_scheduler_structs_test_1a3e1ee2e7a654182966da74746e14e103" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_public_transportation_scheduler_structs_test_1a3e1ee2e7a654182966da74746e14e103" kindref="member">SetUp</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>scheduleHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>vendorListHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>sponsorListHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>root<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="class_public_transportation_scheduler_structs_test_1a8a01f7b5c884ca9133b50927292255f2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_public_transportation_scheduler_structs_test_1a8a01f7b5c884ca9133b50927292255f2" kindref="member">TearDown</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>scheduleHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>vendorListHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>sponsorListHead<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>root<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal">};</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>User<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestUserCreation)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>User<sp/>user;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>strcpy(user.username,<sp/></highlight><highlight class="stringliteral">&quot;testuser&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>strcpy(user.password,<sp/></highlight><highlight class="stringliteral">&quot;password&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(user.username,<sp/></highlight><highlight class="stringliteral">&quot;testuser&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(user.password,<sp/></highlight><highlight class="stringliteral">&quot;password&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>Band<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="publictransportationscheduler__test_8cpp_1afbff1394049fa9ca2604ed71c1c3a3a9" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestBandCreation)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>Band<sp/>band;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>strcpy(band.name,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>Band&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(band.name,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>Band&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>ScheduleNode<sp/>creation<sp/>and<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="publictransportationscheduler__test_8cpp_1a734dc47db66714737a06379b40ae14ad" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestScheduleNodeCreationAndLinking)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>ScheduleNode*<sp/>node1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ScheduleNode{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2024-12-01&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>ScheduleNode*<sp/>node2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ScheduleNode{<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2024-12-02&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>node1<sp/>};</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>node1-&gt;next<sp/>=<sp/>node2;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>scheduleHead<sp/>=<sp/>node1;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>EXPECT_EQ(scheduleHead-&gt;scheduleID,<sp/>1);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(scheduleHead-&gt;next-&gt;bandName,<sp/></highlight><highlight class="stringliteral">&quot;Band<sp/>B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node1;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node2;</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>TicketSale<sp/>struct<sp/>creation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="publictransportationscheduler__test_8cpp_1a080b6aa2f76f39dd080c1450e6d93897" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestTicketSaleCreation)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>TicketSale<sp/>sale<sp/>=<sp/>{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">,<sp/>50.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-01&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>EXPECT_EQ(sale.saleID,<sp/>1);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(sale.ticketType,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>EXPECT_FLOAT_EQ(sale.amount,<sp/>50.0);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(sale.date,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-01&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>Vendor<sp/>struct<sp/>creation<sp/>and<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="publictransportationscheduler__test_8cpp_1ac5c2c9c9ae4460f92adc0b13f1bb0e7f" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestVendorCreationAndLinking)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>Vendor*<sp/>vendor1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vendor{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Vendor<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Food&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>Vendor*<sp/>vendor2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vendor{<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Vendor<sp/>B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Drink&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>vendor1-&gt;next<sp/>=<sp/>vendor2;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>vendorListHead<sp/>=<sp/>vendor1;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>EXPECT_EQ(vendorListHead-&gt;id,<sp/>1);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(vendorListHead-&gt;next-&gt;name,<sp/></highlight><highlight class="stringliteral">&quot;Vendor<sp/>B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>vendor1;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>vendor2;</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>Sponsor<sp/>struct<sp/>creation<sp/>and<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="publictransportationscheduler__test_8cpp_1a41c6eaa1a2f91362c6a9fc24cccacdd6" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestSponsorCreationAndLinking)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>Sponsor*<sp/>sponsor1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Sponsor{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Sponsor<sp/>A&quot;</highlight><highlight class="normal">,<sp/>1000.0,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>Sponsor*<sp/>sponsor2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Sponsor{<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Sponsor<sp/>B&quot;</highlight><highlight class="normal">,<sp/>2000.0,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>sponsor1-&gt;next<sp/>=<sp/>sponsor2;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>sponsorListHead<sp/>=<sp/>sponsor1;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>EXPECT_EQ(sponsorListHead-&gt;id,<sp/>1);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(sponsorListHead-&gt;next-&gt;contributionAmount,<sp/>2000.0);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>sponsor1;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>sponsor2;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>DoubleNode<sp/>struct<sp/>for<sp/>route<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="publictransportationscheduler__test_8cpp_1a6fe0acaeb2dcc9bc50b81f12b03dfd67" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestDoubleNodeCreationAndLinking)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>DoubleNode*<sp/>node1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DoubleNode{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Route<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>A&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>DoubleNode*<sp/>node2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DoubleNode{<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Route<sp/>B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>B&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>node1<sp/>};</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>node1-&gt;next<sp/>=<sp/>node2;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;data,<sp/>1);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(node1-&gt;next-&gt;routeName,<sp/></highlight><highlight class="stringliteral">&quot;Route<sp/>B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node1;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node2;</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>XORNode<sp/>struct<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="publictransportationscheduler__test_8cpp_1a0e4e29770fc1bbdd2bcb8d814adb116c" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestXORNodeCreationAndLinking)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>XORNode*<sp/>node1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XORNode{<sp/>1,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>XORNode*<sp/>node2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XORNode{<sp/>2,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>node1-&gt;npx<sp/>=<sp/>node2;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>node2-&gt;npx<sp/>=<sp/>node1;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;data,<sp/>1);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;npx,<sp/>node2);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node1;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node2;</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>SparseMatrixNode<sp/>struct<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="publictransportationscheduler__test_8cpp_1ab34cb6479493cfd5536dee13f8aedf6e" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestSparseMatrixNodeCreationAndLinking)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>SparseMatrixNode*<sp/>node1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SparseMatrixNode{<sp/>0,<sp/>0,<sp/>5,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>SparseMatrixNode*<sp/>node2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SparseMatrixNode{<sp/>1,<sp/>1,<sp/>10,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>node1-&gt;next<sp/>=<sp/>node2;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;value,<sp/>5);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node1-&gt;next-&gt;value,<sp/>10);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node1;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node2;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>Node<sp/>struct<sp/>for<sp/>stack<sp/>and<sp/>queue<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604" refid="publictransportationscheduler__test_8cpp_1ae8d9e91f71b1de8ee55f2bd229e65ccf" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestNodeStackAndQueueOperations)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>Node*<sp/>stackTop<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>Node*<sp/>queueFront<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>Node*<sp/>queueRear<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stack<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>Node*<sp/>stackNode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Node{<sp/>10,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>stackTop<sp/>=<sp/>stackNode;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>EXPECT_EQ(stackTop-&gt;data,<sp/>10);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Queue<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>Node*<sp/>queueNode1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Node{<sp/>20,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>queueFront<sp/>=<sp/>queueRear<sp/>=<sp/>queueNode1;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>Node*<sp/>queueNode2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Node{<sp/>30,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>queueRear-&gt;next<sp/>=<sp/>queueNode2;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>queueRear<sp/>=<sp/>queueNode2;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>EXPECT_EQ(queueFront-&gt;data,<sp/>20);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>EXPECT_EQ(queueRear-&gt;data,<sp/>30);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>stackNode;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>queueNode1;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>queueNode2;</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>BPlusTreeNode<sp/>struct<sp/>creation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="publictransportationscheduler__test_8cpp_1a84026c09f46ffef8b33db84088f9f808" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a1e2d5b306bf87718b6812a797feabb19" kindref="member">TEST_F</ref>(<ref refid="class_public_transportation_scheduler_structs_test" kindref="compound">PublicTransportationSchedulerStructsTest</ref>,<sp/>TestBPlusTreeNodeCreation)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>BPlusTreeNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>BPlusTreeNode;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>node-&gt;keys[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>node-&gt;sales[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TicketSale{<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">,<sp/>50.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-01&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>node-&gt;numKeys<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>node-&gt;isLeaf<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>root<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>EXPECT_EQ(root-&gt;keys[0],<sp/>1);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(root-&gt;sales[0]-&gt;ticketType,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(root-&gt;isLeaf);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>root-&gt;sales[0];</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>flow<sp/>test<sp/>for<sp/>registration<sp/>and<sp/>route<sp/>addition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="publictransportationscheduler__test_8cpp_1abb5b7ee9a19c831976924f441e9168a3" refkind="member"><highlight class="normal"><ref refid="publictransportationscheduler__test_8cpp_1a2a65c62a06dcbf62bdc73d2f3b681282" kindref="member">TEST</ref>(<ref refid="class_public_transportation_scheduler_test" kindref="compound">PublicTransportationSchedulerTest</ref>,<sp/>TestCompleteFlow)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>registerUser(</highlight><highlight class="stringliteral">&quot;flowuser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;flowpassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>EXPECT_EQ(login(</highlight><highlight class="stringliteral">&quot;flowuser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;flowpassword&quot;</highlight><highlight class="normal">),<sp/>1);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>addRoute(2,<sp/></highlight><highlight class="stringliteral">&quot;Flow<sp/>Route&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Flow<sp/>Start&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Flow<sp/>End&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>EXPECT_EQ(findDoubleNode(routeListHead,<sp/>2)-&gt;data,<sp/>2);</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/publictransportationscheduler/publictransportationscheduler_test.cpp"/>
  </compounddef>
</doxygen>

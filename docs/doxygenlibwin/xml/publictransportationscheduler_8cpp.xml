<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="publictransportationscheduler_8cpp" kind="file" language="C++">
    <compoundname>publictransportationscheduler.cpp</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="publictransportationschedulerapp_8h" local="yes">../../publictransportationschedulerapp/header/publictransportationschedulerapp.h</includes>
    <includedby refid="publictransportationschedulerapp_8cpp" local="yes">src/publictransportationschedulerapp/src/publictransportationschedulerapp.cpp</includedby>
    <incdepgraph>
      <node id="8">
        <label>publictransportationscheduler.h</label>
        <link refid="publictransportationscheduler_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/publictransportationscheduler/src/publictransportationscheduler.cpp</label>
        <link refid="publictransportationscheduler_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>../../publictransportationschedulerapp/header/publictransportationschedulerapp.h</label>
        <link refid="publictransportationschedulerapp_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/publictransportationscheduler/src/publictransportationscheduler.cpp</label>
        <link refid="publictransportationscheduler_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/publictransportationschedulerapp/src/publictransportationschedulerapp.cpp</label>
        <link refid="publictransportationschedulerapp_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_route" prot="public">Route</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="publictransportationscheduler_8cpp_1a032503e76d6f69bc67e99e909c8125da" prot="public" static="no">
        <name>TABLE_SIZE</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="29" column="9" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int userCount</definition>
        <argsstring></argsstring>
        <name>userCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="12" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" prot="public" static="no" mutable="no">
        <type><ref refid="struct_user" kindref="compound">User</ref></type>
        <definition>User userDatabase[100]</definition>
        <argsstring>[100]</argsstring>
        <name>userDatabase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="13" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int bandCount</definition>
        <argsstring></argsstring>
        <name>bandCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="14" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a27218c54b53aecae57c119ea795dbd4d" prot="public" static="no" mutable="no">
        <type><ref refid="struct_band" kindref="compound">Band</ref></type>
        <definition>Band bandDatabase[100]</definition>
        <argsstring>[100]</argsstring>
        <name>bandDatabase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="15" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1adcd2ade0c3e74c1ed507ec2a725fb1bb" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int scheduleCount</definition>
        <argsstring></argsstring>
        <name>scheduleCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="16" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a52f16cfef870351b90f1100acf77a397" prot="public" static="no" mutable="no">
        <type><ref refid="struct_schedule_node" kindref="compound">ScheduleNode</ref></type>
        <definition>ScheduleNode scheduleDatabase[100]</definition>
        <argsstring>[100]</argsstring>
        <name>scheduleDatabase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="17" column="14" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a92feea896317e1b65a94d3765aa24ada" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int salesCount</definition>
        <argsstring></argsstring>
        <name>salesCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="18" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a57634d633a48dc77791e8b628f5e8a82" prot="public" static="no" mutable="no">
        <type><ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref></type>
        <definition>TicketSale salesDatabase[100]</definition>
        <argsstring>[100]</argsstring>
        <name>salesDatabase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="19" column="12" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a37db7cb306b292653d118189f7fce72c" prot="public" static="no" mutable="no">
        <type><ref refid="struct_vendor" kindref="compound">Vendor</ref></type>
        <definition>Vendor vendorDatabase[100]</definition>
        <argsstring>[100]</argsstring>
        <name>vendorDatabase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="21" column="8" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a727dbbf7ce1b688f51a51f447de307c5" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int vendorCount</definition>
        <argsstring></argsstring>
        <name>vendorCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="22" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1af05551cee90a56be96756592122b4eed" prot="public" static="no" mutable="no">
        <type><ref refid="struct_sponsor" kindref="compound">Sponsor</ref></type>
        <definition>Sponsor sponsorDatabase[100]</definition>
        <argsstring>[100]</argsstring>
        <name>sponsorDatabase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="23" column="9" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a13ad26b4873cc2da9e096e6de716a16f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int sponsorCount</definition>
        <argsstring></argsstring>
        <name>sponsorCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="24" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1adc6ed461fd9b672e2e38183fb94cc486" prot="public" static="no" mutable="no">
        <type><ref refid="struct_double_node" kindref="compound">DoubleNode</ref> *</type>
        <definition>DoubleNode* routeListHead</definition>
        <argsstring></argsstring>
        <name>routeListHead</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="25" column="12" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" prot="public" static="no" mutable="no">
        <type><ref refid="struct_user" kindref="compound">User</ref> *</type>
        <definition>User* hashTable[TABLE_SIZE]</definition>
        <argsstring>[TABLE_SIZE]</argsstring>
        <name>hashTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="30" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" prot="public" static="no" mutable="no">
        <type><ref refid="struct_node" kindref="compound">Node</ref> *</type>
        <definition>Node* stack</definition>
        <argsstring></argsstring>
        <name>stack</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="281" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" prot="public" static="no" mutable="no">
        <type><ref refid="struct_node" kindref="compound">Node</ref> *</type>
        <definition>Node* queueFront</definition>
        <argsstring></argsstring>
        <name>queueFront</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="282" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a62ee68cd3e3392b4bc821385889bede4" prot="public" static="no" mutable="no">
        <type><ref refid="struct_node" kindref="compound">Node</ref> *</type>
        <definition>Node * queueRear</definition>
        <argsstring></argsstring>
        <name>queueRear</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="282" column="18" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int heap[100]</definition>
        <argsstring>[100]</argsstring>
        <name>heap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="344" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="publictransportationscheduler_8cpp_1a50a655d085f2d580459b7e05b2774217" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int heapSize</definition>
        <argsstring></argsstring>
        <name>heapSize</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="345" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="345" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1aae50276d118e9723f33a385fc7aeb899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hashFunction</definition>
        <argsstring>(const char *key)</argsstring>
        <name>hashFunction</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Calculates the hash for a given key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to hash. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hash index for the given key. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="42" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="42" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a08256d4367e9d0de8e45fcbd61e04fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initializeHashTable</definition>
        <argsstring>()</argsstring>
        <name>initializeHashTable</name>
        <briefdescription>
<para>Initializes the hash table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="53" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1aa4a39a100849a286c2c4c5e0e28d273e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addUserToHashTable</definition>
        <argsstring>(const char *username, const char *password)</argsstring>
        <name>addUserToHashTable</name>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Adds a user to the hash table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The password for the user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="64" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="64" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1ad3299a040b8eebab6b1275eae5821d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int verifyUserInHashTable</definition>
        <argsstring>(const char *username, const char *password)</argsstring>
        <name>verifyUserInHashTable</name>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Verifies a user in the hash table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username to verify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The password to verify. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the user is found and password matches, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="80" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="80" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1aa0547cb40e88545452eeac4c997171d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addRoute</definition>
        <argsstring>(int routeID, const char *routeName, const char *startPoint, const char *endPoint)</argsstring>
        <name>addRoute</name>
        <param>
          <type>int</type>
          <declname>routeID</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>routeName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>startPoint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>endPoint</declname>
        </param>
        <briefdescription>
<para>Adds a route to the double linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>routeID</parametername>
</parameternamelist>
<parameterdescription>
<para>The route ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>routeName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the route. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting point of the route. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The ending point of the route. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="100" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="100" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1ab289a4be500c44391d41c26dc04573ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertDoubleNode</definition>
        <argsstring>(DoubleNode **head, int data)</argsstring>
        <name>insertDoubleNode</name>
        <param>
          <type><ref refid="struct_double_node" kindref="compound">DoubleNode</ref> **</type>
          <declname>head</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Inserts a node into the double linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the head of the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="120" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="120" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1af243334b827491156582ba5af5ca47d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_double_node" kindref="compound">DoubleNode</ref> *</type>
        <definition>DoubleNode * findDoubleNode</definition>
        <argsstring>(DoubleNode *head, int data)</argsstring>
        <name>findDoubleNode</name>
        <param>
          <type><ref refid="struct_double_node" kindref="compound">DoubleNode</ref> *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Finds a route node by route ID in the double linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The route ID to search for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the node if found, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="139" column="12" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="139" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a15f4f5e94a4ac3685082b8448aaba05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deleteDoubleNode</definition>
        <argsstring>(DoubleNode **head, int data)</argsstring>
        <name>deleteDoubleNode</name>
        <param>
          <type><ref refid="struct_double_node" kindref="compound">DoubleNode</ref> **</type>
          <declname>head</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Deletes a node by route ID from the double linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the head of the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The route ID to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the node is deleted, 0 if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="157" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="157" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1afad9893748f5ea3ff48a1e40abd9b6b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void editRoute</definition>
        <argsstring>(DoubleNode *routeNode, const char *routeName, const char *startPoint, const char *endPoint)</argsstring>
        <name>editRoute</name>
        <param>
          <type><ref refid="struct_double_node" kindref="compound">DoubleNode</ref> *</type>
          <declname>routeNode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>routeName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>startPoint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>endPoint</declname>
        </param>
        <briefdescription>
<para>Edits a route node with new details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>routeNode</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to edit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>routeName</parametername>
</parameternamelist>
<parameterdescription>
<para>The new route name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The new starting point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The new ending point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="189" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="189" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a838a8eee88deae1b268325c2c1efdedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printDetailedRouteList</definition>
        <argsstring>(DoubleNode *head)</argsstring>
        <name>printDetailedRouteList</name>
        <param>
          <type><ref refid="struct_double_node" kindref="compound">DoubleNode</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Prints a detailed list of all routes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the route list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="201" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="201" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1ad72c75a43e50e885612cc420ba107b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printDoubleList</definition>
        <argsstring>(DoubleNode *head)</argsstring>
        <name>printDoubleList</name>
        <param>
          <type><ref refid="struct_double_node" kindref="compound">DoubleNode</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Prints a list of all routes by ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>The head of the route list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="220" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="220" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a499c51677d90731938874f947161b61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref> *</type>
        <definition>XORNode * XOR</definition>
        <argsstring>(XORNode *a, XORNode *b)</argsstring>
        <name>XOR</name>
        <param>
          <type><ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Computes the XOR of two pointers for XOR linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first <ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second <ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XOR of the two pointers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="242" column="9" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a784daf7f98c539cd69746b8b3db1ecea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertXORNode</definition>
        <argsstring>(XORNode **head, int data)</argsstring>
        <name>insertXORNode</name>
        <param>
          <type><ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref> **</type>
          <declname>head</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Inserts a new node into the XOR linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the head of the XOR linked list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to store in the new node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="251" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="251" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a3dad1d43a47d9db88b8659a4306bb249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertSparseNode</definition>
        <argsstring>(SparseMatrixNode **head, int row, int col, int value)</argsstring>
        <name>insertSparseNode</name>
        <param>
          <type><ref refid="struct_sparse_matrix_node" kindref="compound">SparseMatrixNode</ref> **</type>
          <declname>head</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Inserts a node into a sparse matrix linked list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the head of the sparse matrix linked list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Column index of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="270" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="270" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a9235f768e511383f117f41ab92d601f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push</definition>
        <argsstring>(int data)</argsstring>
        <name>push</name>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Pushes a data element onto the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to push onto the stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="288" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="288" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a163177f1a0b7d847bc3241809dafc097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop</definition>
        <argsstring>()</argsstring>
        <name>pop</name>
        <briefdescription>
<para>Pops a data element from the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The popped data from the stack, or -1 if stack is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="299" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="299" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a011d1d2e69488147446e6abf4df9acb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enqueue</definition>
        <argsstring>(int data)</argsstring>
        <name>enqueue</name>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Enqueues a data element into the queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to enqueue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="313" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="313" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1ad6e0da35e82ee741ee4e9779fdf9e1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dequeue</definition>
        <argsstring>()</argsstring>
        <name>dequeue</name>
        <briefdescription>
<para>Dequeues a data element from the queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The dequeued data from the queue, or -1 if queue is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="329" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="329" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a3f05f3efe9a5a4aa7daaee5fc4d2ebce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertHeap</definition>
        <argsstring>(int data)</argsstring>
        <name>insertHeap</name>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Inserts data into a min-heap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to insert into the heap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="351" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="351" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a8641221dc62558605a4b4921ec89a3e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int extractMin</definition>
        <argsstring>()</argsstring>
        <name>extractMin</name>
        <briefdescription>
<para>Extracts the minimum element from the min-heap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The minimum element from the heap, or -1 if heap is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="366" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="366" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a1f9e130c21127e918f9cd652c28960af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bfs</definition>
        <argsstring>(int startNode)</argsstring>
        <name>bfs</name>
        <param>
          <type>int</type>
          <declname>startNode</declname>
        </param>
        <briefdescription>
<para>Performs Breadth-First Search (BFS) starting from a given node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startNode</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting node for BFS. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="394" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="394" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a0d63cfae7795f2aeb269ea111bc0c997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dfs</definition>
        <argsstring>(int startNode)</argsstring>
        <name>dfs</name>
        <param>
          <type>int</type>
          <declname>startNode</declname>
        </param>
        <briefdescription>
<para>Performs Depth-First Search (DFS) starting from a given node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startNode</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting node for DFS. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="411" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="411" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a1501a9df250a3e79e2ec3498c7a65499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compressDataHuffman</definition>
        <argsstring>(const char *data)</argsstring>
        <name>compressDataHuffman</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Compresses the given data using Huffman coding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to compress. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="430" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="430" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a32369377e1d95d2063b21cde84df5866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void decompressDataHuffman</definition>
        <argsstring>()</argsstring>
        <name>decompressDataHuffman</name>
        <briefdescription>
<para>Decompresses data using Huffman coding. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="438" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="438" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1acb3232bc0e9ef9e48324e06e627676c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KMPSearch</definition>
        <argsstring>(const char *pattern, const char *text)</argsstring>
        <name>KMPSearch</name>
        <param>
          <type>const char *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Searches for a pattern within a text using the KMP algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>The pattern to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text to search within. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="450" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="450" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a7464a341010bc5e28caeda8fbbc74def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadUserDatabase</definition>
        <argsstring>()</argsstring>
        <name>loadUserDatabase</name>
        <briefdescription>
<para>Loads the user database from a binary file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="491" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="491" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a9c04dff0438032d46ae97d3c76ef88a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveUserDatabase</definition>
        <argsstring>()</argsstring>
        <name>saveUserDatabase</name>
        <briefdescription>
<para>Saves the user database to a binary file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="505" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="505" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a378330dd86baa7420fe4ed0147845c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int login</definition>
        <argsstring>(const char *username, const char *password)</argsstring>
        <name>login</name>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Authenticates a user by verifying their username and password. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>The username to authenticate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The password associated with the username. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if login is successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="519" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="519" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a2954b6e11695b7a4b9c9fc2df4ecd21d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registerUser</definition>
        <argsstring>(const char *username, const char *password)</argsstring>
        <name>registerUser</name>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Registers a new user with a username and password. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>The new user&apos;s username. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The new user&apos;s password. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="539" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="539" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1afcfbe032666cbafc1c70209d8119d996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadBandDatabase</definition>
        <argsstring>()</argsstring>
        <name>loadBandDatabase</name>
        <briefdescription>
<para>Loads the band database from a binary file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="568" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="568" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a92fd4511b9f726d102b69f09c9ee2e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveBandDatabase</definition>
        <argsstring>()</argsstring>
        <name>saveBandDatabase</name>
        <briefdescription>
<para>Saves the band database to a binary file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="582" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="582" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a6358fabef3ecd2e6c604fb9c839b7f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addBand</definition>
        <argsstring>(const char *name)</argsstring>
        <name>addBand</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Adds a new band or artist to the band database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the band or artist to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="594" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="594" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a60b614018039aa27af5ec0a05f8ff322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void editBand</definition>
        <argsstring>(const char *oldName, const char *newName)</argsstring>
        <name>editBand</name>
        <param>
          <type>const char *</type>
          <declname>oldName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
<para>Edits the name of an existing band or artist. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldName</parametername>
</parameternamelist>
<parameterdescription>
<para>The current name of the band or artist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newName</parametername>
</parameternamelist>
<parameterdescription>
<para>The new name for the band or artist. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="610" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="610" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1aced0e53ac2e52b903d66fdd4549329a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void viewBands</definition>
        <argsstring>()</argsstring>
        <name>viewBands</name>
        <briefdescription>
<para>Displays the list of all bands and artists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="626" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="626" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a3ec3918c87d436416f26edbb978bb9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void editSchedule</definition>
        <argsstring>(int scheduleID, const char *newBandName, const char *newDate)</argsstring>
        <name>editSchedule</name>
        <param>
          <type>int</type>
          <declname>scheduleID</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newBandName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newDate</declname>
        </param>
        <briefdescription>
<para>Edits an existing schedule with a new band and date. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scheduleID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the schedule to edit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newBandName</parametername>
</parameternamelist>
<parameterdescription>
<para>The new band name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newDate</parametername>
</parameternamelist>
<parameterdescription>
<para>The new date for the schedule. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="644" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="644" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a54a7f7463b7df104dc158361dd0aef52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void viewSchedules</definition>
        <argsstring>()</argsstring>
        <name>viewSchedules</name>
        <briefdescription>
<para>Views all available schedules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="664" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="664" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1abfe2afb819030beec59b91b1483a2ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deleteSchedule</definition>
        <argsstring>(int scheduleID)</argsstring>
        <name>deleteSchedule</name>
        <param>
          <type>int</type>
          <declname>scheduleID</declname>
        </param>
        <briefdescription>
<para>Deletes a schedule by its ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scheduleID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the schedule to delete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if deletion is successful, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="683" column="5" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="683" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a6875d46c583ce6dfdc9dc0da41efa85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadScheduleDatabase</definition>
        <argsstring>()</argsstring>
        <name>loadScheduleDatabase</name>
        <briefdescription>
<para>Loads schedules from a binary file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="713" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="713" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a9c118366e46568179ae5af5d22abad21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void createSchedule</definition>
        <argsstring>(int scheduleID, const char *bandName, const char *date)</argsstring>
        <name>createSchedule</name>
        <param>
          <type>int</type>
          <declname>scheduleID</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bandName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>date</declname>
        </param>
        <briefdescription>
<para>Creates a new schedule entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scheduleID</parametername>
</parameternamelist>
<parameterdescription>
<para>The schedule ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bandName</parametername>
</parameternamelist>
<parameterdescription>
<para>The band name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>date</parametername>
</parameternamelist>
<parameterdescription>
<para>The scheduled date. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="743" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="743" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1af254c2b4333b9bac57d59b111834014f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveScheduleDatabase</definition>
        <argsstring>()</argsstring>
        <name>saveScheduleDatabase</name>
        <briefdescription>
<para>Saves the schedule database to a binary file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="762" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="762" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1aeffc198935d210e3bbaf244809ca992c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref> *</type>
        <definition>BPlusTreeNode * createNode</definition>
        <argsstring>(bool isLeaf)</argsstring>
        <name>createNode</name>
        <param>
          <type>bool</type>
          <declname>isLeaf</declname>
        </param>
        <briefdescription>
<para>Creates a new B+ tree node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isLeaf</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates if the node is a leaf node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the newly created B+ tree node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="801" column="15" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="801" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a2f41eed3a6bebcb110434e5874c74fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref> *</type>
        <definition>TicketSale * searchBPlusTree</definition>
        <argsstring>(int key)</argsstring>
        <name>searchBPlusTree</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Searches the B+ tree for a specific key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to search for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the ticket sale if found, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="819" column="12" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="819" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a34f0d3361e53b7a66d6d3e4806d7c9a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertBPlusNode</definition>
        <argsstring>(int key, TicketSale *sale)</argsstring>
        <name>insertBPlusNode</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref> *</type>
          <declname>sale</declname>
        </param>
        <briefdescription>
<para>Inserts a new key and ticket sale into the B+ tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sale</parametername>
</parameternamelist>
<parameterdescription>
<para>The associated ticket sale data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="848" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="848" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a436bc8449c6d9e9b7b0b8a04d5c2bb77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void displayBPlusTree</definition>
        <argsstring>(BPlusTreeNode *node)</argsstring>
        <name>displayBPlusTree</name>
        <param>
          <type><ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Displays the B+ tree contents. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The root node of the B+ tree. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="890" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="890" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1acad3ee31c17cb0696e8df858ac13465f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initializeBPlusTree</definition>
        <argsstring>()</argsstring>
        <name>initializeBPlusTree</name>
        <briefdescription>
<para>Initializes the B+ tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="909" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="909" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a7ca5eb618ca02eba384a217adb2e3e70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadSalesDatabase</definition>
        <argsstring>()</argsstring>
        <name>loadSalesDatabase</name>
        <briefdescription>
<para>Loads sales data from the binary file and inserts it into the B+ tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="916" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="916" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1ae32e1898a3a814a0bb5c26d4fcb68de2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void viewSalesData</definition>
        <argsstring>()</argsstring>
        <name>viewSalesData</name>
        <briefdescription>
<para>Displays all ticket sales data in the B+ tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="940" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="940" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1ae6aaf9b1c0a852ddeeed4e6f9dc818f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveSampleSalesData</definition>
        <argsstring>()</argsstring>
        <name>saveSampleSalesData</name>
        <briefdescription>
<para>Saves a sample sales dataset to the binary file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="969" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="969" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a52c3863e2808e63bc383d10064016abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void generateSalesReport</definition>
        <argsstring>()</argsstring>
        <name>generateSalesReport</name>
        <briefdescription>
<para>Generates a sales report summarizing ticket sales data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="994" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="994" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a46d5b27892b1949a92d1b5c3a4a0f490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addVendor</definition>
        <argsstring>(int id, const char *name, const char *serviceType)</argsstring>
        <name>addVendor</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>serviceType</declname>
        </param>
        <briefdescription>
<para>Adds a new vendor to the vendor list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the vendor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the vendor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serviceType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of service provided by the vendor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="1032" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="1032" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1ac380e4c79f20a62c0bf76f4bd7717784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addSponsor</definition>
        <argsstring>(int id, const char *name, double contributionAmount)</argsstring>
        <name>addSponsor</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>contributionAmount</declname>
        </param>
        <briefdescription>
<para>Adds a new sponsor to the sponsor list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the sponsor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the sponsor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contributionAmount</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount contributed by the sponsor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="1047" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="1047" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a0d6885f3029b75ce370431b95b54bf73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveVendorDatabase</definition>
        <argsstring>()</argsstring>
        <name>saveVendorDatabase</name>
        <briefdescription>
<para>Saves the vendor database to a binary file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="1059" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="1059" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1ab7cac0638d8d265304799360555d9eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveSponsorDatabase</definition>
        <argsstring>()</argsstring>
        <name>saveSponsorDatabase</name>
        <briefdescription>
<para>Saves the sponsor database to a binary file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="1075" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="1075" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a9478ff5b539d7d0ea768b43bb0b2a57b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadVendorDatabase</definition>
        <argsstring>()</argsstring>
        <name>loadVendorDatabase</name>
        <briefdescription>
<para>Loads the vendor database from a binary file and adds vendors to the list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="1091" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="1091" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1afc050fc76e7ac7bca437021f3842254a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadSponsorDatabase</definition>
        <argsstring>()</argsstring>
        <name>loadSponsorDatabase</name>
        <briefdescription>
<para>Loads the sponsor database from a binary file and adds sponsors to the list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="1109" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="1109" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a22e477b1167ee3a1a1fb74af23c4a4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addVendorMenu</definition>
        <argsstring>()</argsstring>
        <name>addVendorMenu</name>
        <briefdescription>
<para>Displays a menu for adding a new vendor and saves the vendor data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="1127" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="1127" bodyend="1140"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a05db9accf57963aae5e0da727b8b21d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addSponsorMenu</definition>
        <argsstring>()</argsstring>
        <name>addSponsorMenu</name>
        <briefdescription>
<para>Displays a menu for adding a new sponsor and saves the sponsor data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="1145" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="1145" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a707153d90df4a85d7b79bb0e2ac84561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void manageVendors</definition>
        <argsstring>()</argsstring>
        <name>manageVendors</name>
        <briefdescription>
<para>Loads and displays the list of all vendors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="1163" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="1163" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="publictransportationscheduler_8cpp_1a47bb57a4772b96184408e7b601c028dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trackSponsors</definition>
        <argsstring>()</argsstring>
        <name>trackSponsors</name>
        <briefdescription>
<para>Loads and displays the list of all sponsors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp" line="1177" column="6" bodyfile="src/publictransportationscheduler/src/publictransportationscheduler.cpp" bodystart="1177" bodyend="1186"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>uintptr_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="publictransportationschedulerapp_8h" kindref="compound">../../publictransportationschedulerapp/header/publictransportationschedulerapp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>Definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="13" refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" refkind="member"><highlight class="normal"><ref refid="struct_user" kindref="compound">User</ref><sp/><ref refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" kindref="member">userDatabase</ref>[100];</highlight></codeline>
<codeline lineno="14" refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" kindref="member">bandCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15" refid="publictransportationscheduler_8cpp_1a27218c54b53aecae57c119ea795dbd4d" refkind="member"><highlight class="normal"><ref refid="struct_band" kindref="compound">Band</ref><sp/><ref refid="publictransportationscheduler_8cpp_1a27218c54b53aecae57c119ea795dbd4d" kindref="member">bandDatabase</ref>[100];</highlight></codeline>
<codeline lineno="16" refid="publictransportationscheduler_8cpp_1adcd2ade0c3e74c1ed507ec2a725fb1bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1adcd2ade0c3e74c1ed507ec2a725fb1bb" kindref="member">scheduleCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="17" refid="publictransportationscheduler_8cpp_1a52f16cfef870351b90f1100acf77a397" refkind="member"><highlight class="normal"><ref refid="struct_schedule_node" kindref="compound">ScheduleNode</ref><sp/><ref refid="publictransportationscheduler_8cpp_1a52f16cfef870351b90f1100acf77a397" kindref="member">scheduleDatabase</ref>[100];</highlight></codeline>
<codeline lineno="18" refid="publictransportationscheduler_8cpp_1a92feea896317e1b65a94d3765aa24ada" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a92feea896317e1b65a94d3765aa24ada" kindref="member">salesCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="19" refid="publictransportationscheduler_8cpp_1a57634d633a48dc77791e8b628f5e8a82" refkind="member"><highlight class="normal"><ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref><sp/><ref refid="publictransportationscheduler_8cpp_1a57634d633a48dc77791e8b628f5e8a82" kindref="member">salesDatabase</ref>[100];</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="publictransportationscheduler_8cpp_1a37db7cb306b292653d118189f7fce72c" refkind="member"><highlight class="normal"><ref refid="struct_vendor" kindref="compound">Vendor</ref><sp/><ref refid="publictransportationscheduler_8cpp_1a37db7cb306b292653d118189f7fce72c" kindref="member">vendorDatabase</ref>[100];</highlight></codeline>
<codeline lineno="22" refid="publictransportationscheduler_8cpp_1a727dbbf7ce1b688f51a51f447de307c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a727dbbf7ce1b688f51a51f447de307c5" kindref="member">vendorCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23" refid="publictransportationscheduler_8cpp_1af05551cee90a56be96756592122b4eed" refkind="member"><highlight class="normal"><ref refid="struct_sponsor" kindref="compound">Sponsor</ref><sp/><ref refid="publictransportationscheduler_8cpp_1af05551cee90a56be96756592122b4eed" kindref="member">sponsorDatabase</ref>[100];</highlight></codeline>
<codeline lineno="24" refid="publictransportationscheduler_8cpp_1a13ad26b4873cc2da9e096e6de716a16f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a13ad26b4873cc2da9e096e6de716a16f" kindref="member">sponsorCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25" refid="publictransportationscheduler_8cpp_1adc6ed461fd9b672e2e38183fb94cc486" refkind="member"><highlight class="normal"><ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*<ref refid="publictransportationscheduler_8cpp_1adc6ed461fd9b672e2e38183fb94cc486" kindref="member">routeListHead</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hash<sp/>Table<sp/>Definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="publictransportationscheduler_8cpp_1a032503e76d6f69bc67e99e909c8125da" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TABLE_SIZE<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" refkind="member"><highlight class="normal"><ref refid="struct_user" kindref="compound">User</ref><sp/>*<ref refid="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" kindref="member">hashTable</ref>[<ref refid="publictransportationscheduler_8cpp_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="struct_route" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33" refid="struct_route_1a611552188bde3ae872f85bc41eb1f4ce" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_route_1a611552188bde3ae872f85bc41eb1f4ce" kindref="member">routeID</ref>;</highlight></codeline>
<codeline lineno="34" refid="struct_route_1ab0e60460f842a53603320f9a81052ed1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>routeName[50];</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}<sp/><ref refid="struct_route" kindref="compound">Route</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="publictransportationscheduler_8h_1aae50276d118e9723f33a385fc7aeb899" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1aae50276d118e9723f33a385fc7aeb899" kindref="member">hashFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*key)<sp/>hash<sp/>+=<sp/>*key++;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash<sp/>%<sp/><ref refid="publictransportationscheduler_8cpp_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="publictransportationscheduler_8h_1a08256d4367e9d0de8e45fcbd61e04fd9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a08256d4367e9d0de8e45fcbd61e04fd9" kindref="member">initializeHashTable</ref>()<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="publictransportationscheduler_8cpp_1a032503e76d6f69bc67e99e909c8125da" kindref="member">TABLE_SIZE</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" kindref="member">hashTable</ref>[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="publictransportationscheduler_8h_1aa4a39a100849a286c2c4c5e0e28d273e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1aa4a39a100849a286c2c4c5e0e28d273e" kindref="member">addUserToHashTable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*username,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*password)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1aae50276d118e9723f33a385fc7aeb899" kindref="member">hashFunction</ref>(username);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" kindref="member">hashTable</ref>[index]<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" kindref="member">hashTable</ref>[index]<sp/>=<sp/>(<ref refid="struct_user" kindref="compound">User</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_user" kindref="compound">User</ref>));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(<ref refid="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" kindref="member">hashTable</ref>[index]-&gt;username,<sp/>username);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(<ref refid="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" kindref="member">hashTable</ref>[index]-&gt;password,<sp/>password);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="publictransportationscheduler_8h_1ad3299a040b8eebab6b1275eae5821d8c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1ad3299a040b8eebab6b1275eae5821d8c" kindref="member">verifyUserInHashTable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*username,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*password)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1aae50276d118e9723f33a385fc7aeb899" kindref="member">hashFunction</ref>(username);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" kindref="member">hashTable</ref>[index]<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(<ref refid="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" kindref="member">hashTable</ref>[index]-&gt;username,<sp/>username)<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(<ref refid="publictransportationscheduler_8cpp_1a13b224d16733ccb089ededfa6b883b42" kindref="member">hashTable</ref>[index]-&gt;password,<sp/>password)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Double<sp/>Linked<sp/>List<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="publictransportationscheduler_8cpp_1aa0547cb40e88545452eeac4c997171d0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1aa0547cb40e88545452eeac4c997171d0" kindref="member">addRoute</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>routeID,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*routeName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*startPoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*endPoint)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*newNode<sp/>=<sp/>(<ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_double_node" kindref="compound">DoubleNode</ref>));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_double_node_1ace4d84500ef6d0dc3dcf88f0d12e002c" kindref="member">data</ref><sp/>=<sp/>routeID;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>strcpy(newNode-&gt;<ref refid="struct_double_node_1a9cf812c3258fd9670f7bafd856ab9cf4" kindref="member">routeName</ref>,<sp/>routeName);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>strcpy(newNode-&gt;<ref refid="struct_double_node_1aeb28d101b1871961c75fa86a0145320a" kindref="member">startPoint</ref>,<sp/>startPoint);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>strcpy(newNode-&gt;<ref refid="struct_double_node_1a86d86f690c62d74749076efb1d0542e9" kindref="member">endPoint</ref>,<sp/>endPoint);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_double_node_1a5eb6461fb0145cc9247d8bf9d02e8089" kindref="member">next</ref><sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1adc6ed461fd9b672e2e38183fb94cc486" kindref="member">routeListHead</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_double_node_1abb9ca166e5960d5def98c7014a572397" kindref="member">prev</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8cpp_1adc6ed461fd9b672e2e38183fb94cc486" kindref="member">routeListHead</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1adc6ed461fd9b672e2e38183fb94cc486" kindref="member">routeListHead</ref><sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="publictransportationscheduler_8h_1ab289a4be500c44391d41c26dc04573ec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1ab289a4be500c44391d41c26dc04573ec" kindref="member">insertDoubleNode</ref>(<ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>**head,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*newNode<sp/>=<sp/>(<ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_double_node" kindref="compound">DoubleNode</ref>));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_double_node_1ace4d84500ef6d0dc3dcf88f0d12e002c" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_double_node_1a5eb6461fb0145cc9247d8bf9d02e8089" kindref="member">next</ref><sp/>=<sp/>*head;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_double_node_1abb9ca166e5960d5def98c7014a572397" kindref="member">prev</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*head<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>(*head)-&gt;prev<sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>*head<sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="publictransportationscheduler_8h_1af243334b827491156582ba5af5ca47d3" refkind="member"><highlight class="normal"><ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*<ref refid="publictransportationscheduler_8cpp_1af243334b827491156582ba5af5ca47d3" kindref="member">findDoubleNode</ref>(<ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*head,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*current<sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_double_node_1ace4d84500ef6d0dc3dcf88f0d12e002c" kindref="member">data</ref><sp/>==<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="publictransportationscheduler_8h_1a15f4f5e94a4ac3685082b8448aaba05d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a15f4f5e94a4ac3685082b8448aaba05d" kindref="member">deleteDoubleNode</ref>(<ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>**head,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*current<sp/>=<sp/>*head;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_double_node_1ace4d84500ef6d0dc3dcf88f0d12e002c" kindref="member">data</ref><sp/>==<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_double_node_1abb9ca166e5960d5def98c7014a572397" kindref="member">prev</ref>)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_double_node_1abb9ca166e5960d5def98c7014a572397" kindref="member">prev</ref>-&gt;<ref refid="struct_double_node_1a5eb6461fb0145cc9247d8bf9d02e8089" kindref="member">next</ref><sp/>=<sp/>current-&gt;<ref refid="struct_double_node_1a5eb6461fb0145cc9247d8bf9d02e8089" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*head<sp/>=<sp/>current-&gt;<ref refid="struct_double_node_1a5eb6461fb0145cc9247d8bf9d02e8089" kindref="member">next</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Head<sp/>node<sp/>is<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_double_node_1a5eb6461fb0145cc9247d8bf9d02e8089" kindref="member">next</ref>)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_double_node_1a5eb6461fb0145cc9247d8bf9d02e8089" kindref="member">next</ref>-&gt;<ref refid="struct_double_node_1abb9ca166e5960d5def98c7014a572397" kindref="member">prev</ref><sp/>=<sp/>current-&gt;<ref refid="struct_double_node_1abb9ca166e5960d5def98c7014a572397" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(current);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Deletion<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_double_node_1a5eb6461fb0145cc9247d8bf9d02e8089" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Route<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="publictransportationscheduler_8cpp_1afad9893748f5ea3ff48a1e40abd9b6b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1afad9893748f5ea3ff48a1e40abd9b6b0" kindref="member">editRoute</ref>(<ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*routeNode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*routeName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*startPoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*endPoint)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(routeNode<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(routeNode-&gt;<ref refid="struct_double_node_1a9cf812c3258fd9670f7bafd856ab9cf4" kindref="member">routeName</ref>,<sp/>routeName);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(routeNode-&gt;<ref refid="struct_double_node_1aeb28d101b1871961c75fa86a0145320a" kindref="member">startPoint</ref>,<sp/>startPoint);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(routeNode-&gt;<ref refid="struct_double_node_1a86d86f690c62d74749076efb1d0542e9" kindref="member">endPoint</ref>,<sp/>endPoint);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="publictransportationscheduler_8cpp_1a838a8eee88deae1b268325c2c1efdedf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a838a8eee88deae1b268325c2c1efdedf" kindref="member">printDetailedRouteList</ref>(<ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*head)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*current<sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Current<sp/>Routes:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Route<sp/>ID:<sp/>%d<sp/>|<sp/>Name:<sp/>%s<sp/>|<sp/>Start:<sp/>%s<sp/>|<sp/>End:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_double_node_1ace4d84500ef6d0dc3dcf88f0d12e002c" kindref="member">data</ref>,<sp/>current-&gt;<ref refid="struct_double_node_1a9cf812c3258fd9670f7bafd856ab9cf4" kindref="member">routeName</ref>,<sp/>current-&gt;<ref refid="struct_double_node_1aeb28d101b1871961c75fa86a0145320a" kindref="member">startPoint</ref>,<sp/>current-&gt;<ref refid="struct_double_node_1a86d86f690c62d74749076efb1d0542e9" kindref="member">endPoint</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_double_node_1a5eb6461fb0145cc9247d8bf9d02e8089" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>routes<sp/>available.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="publictransportationscheduler_8h_1ad72c75a43e50e885612cc420ba107b07" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1ad72c75a43e50e885612cc420ba107b07" kindref="member">printDoubleList</ref>(<ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*head)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="struct_double_node" kindref="compound">DoubleNode</ref><sp/>*current<sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Current<sp/>Routes:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Route<sp/>ID:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>current-&gt;<ref refid="struct_double_node_1ace4d84500ef6d0dc3dcf88f0d12e002c" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_double_node_1a5eb6461fb0145cc9247d8bf9d02e8089" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>routes<sp/>available.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XOR<sp/>Linked<sp/>List<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="publictransportationscheduler_8h_1a499c51677d90731938874f947161b61a" refkind="member"><highlight class="normal"><ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref><sp/>*<ref refid="publictransportationscheduler_8cpp_1a499c51677d90731938874f947161b61a" kindref="member">XOR</ref>(<ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref><sp/>*a,<sp/><ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref><sp/>*)((uintptr_t)(a)<sp/>^<sp/>(uintptr_t)(b));</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="publictransportationscheduler_8h_1a784daf7f98c539cd69746b8b3db1ecea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a784daf7f98c539cd69746b8b3db1ecea" kindref="member">insertXORNode</ref>(<ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref><sp/>**head,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref><sp/>*newNode<sp/>=<sp/>(<ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_x_o_r_node" kindref="compound">XORNode</ref>));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_x_o_r_node_1ace398d63223a5a3d25bb625f4bf106e2" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_x_o_r_node_1a90966e7d31bcd0c59dddb1788db21389" kindref="member">npx</ref><sp/>=<sp/>*head;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*head<sp/>!=<sp/>NULL)<sp/>(*head)-&gt;<ref refid="struct_x_o_r_node_1a90966e7d31bcd0c59dddb1788db21389" kindref="member">npx</ref><sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1a499c51677d90731938874f947161b61a" kindref="member">XOR</ref>(newNode,<sp/>(*head)-&gt;<ref refid="struct_x_o_r_node_1a90966e7d31bcd0c59dddb1788db21389" kindref="member">npx</ref>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>*head<sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sparse<sp/>Matrix<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="publictransportationscheduler_8h_1a3dad1d43a47d9db88b8659a4306bb249" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a3dad1d43a47d9db88b8659a4306bb249" kindref="member">insertSparseNode</ref>(<ref refid="struct_sparse_matrix_node" kindref="compound">SparseMatrixNode</ref><sp/>**head,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="struct_sparse_matrix_node" kindref="compound">SparseMatrixNode</ref><sp/>*newNode<sp/>=<sp/>(<ref refid="struct_sparse_matrix_node" kindref="compound">SparseMatrixNode</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_sparse_matrix_node" kindref="compound">SparseMatrixNode</ref>));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_sparse_matrix_node_1a8ce2dd51e0bbd9c85a7321a8f27cd41a" kindref="member">row</ref><sp/>=<sp/>row;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_sparse_matrix_node_1aa07ce50534b765e8bbba0ea5063acb67" kindref="member">col</ref><sp/>=<sp/>col;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_sparse_matrix_node_1a641c08437403335c5a32408ef2c7099e" kindref="member">value</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_sparse_matrix_node_1a02643a9df51e133bbb4f8ddcc02fd04a" kindref="member">next</ref><sp/>=<sp/>*head;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>*head<sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stack<sp/>and<sp/>Queue<sp/>Implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" refkind="member"><highlight class="normal"><ref refid="struct_node" kindref="compound">Node</ref><sp/>*<ref refid="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" kindref="member">stack</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="282" refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" refkind="member"><highlight class="normal"><ref refid="struct_node" kindref="compound">Node</ref><sp/>*<ref refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" kindref="member">queueFront</ref><sp/>=<sp/>NULL,<sp/>*<ref refid="publictransportationscheduler_8cpp_1a62ee68cd3e3392b4bc821385889bede4" kindref="member">queueRear</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="publictransportationscheduler_8h_1a9235f768e511383f117f41ab92d601f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a9235f768e511383f117f41ab92d601f6" kindref="member">push</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="struct_node" kindref="compound">Node</ref><sp/>*newNode<sp/>=<sp/>(<ref refid="struct_node" kindref="compound">Node</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_node" kindref="compound">Node</ref>));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_node_1a87c003c9f600e3fc58e6e90835f0b605" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_node_1af67b110ca1a258b793bf69d306929b22" kindref="member">next</ref><sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" kindref="member">stack</ref><sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="publictransportationscheduler_8h_1a163177f1a0b7d847bc3241809dafc097" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a163177f1a0b7d847bc3241809dafc097" kindref="member">pop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" kindref="member">stack</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" kindref="member">stack</ref>-&gt;<ref refid="struct_node_1a87c003c9f600e3fc58e6e90835f0b605" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><ref refid="struct_node" kindref="compound">Node</ref><sp/>*temp<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" kindref="member">stack</ref><sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" kindref="member">stack</ref>-&gt;<ref refid="struct_node_1af67b110ca1a258b793bf69d306929b22" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>free(temp);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="publictransportationscheduler_8h_1a011d1d2e69488147446e6abf4df9acb4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a011d1d2e69488147446e6abf4df9acb4" kindref="member">enqueue</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><ref refid="struct_node" kindref="compound">Node</ref><sp/>*newNode<sp/>=<sp/>(<ref refid="struct_node" kindref="compound">Node</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_node" kindref="compound">Node</ref>));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_node_1a87c003c9f600e3fc58e6e90835f0b605" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_node_1af67b110ca1a258b793bf69d306929b22" kindref="member">next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8cpp_1a62ee68cd3e3392b4bc821385889bede4" kindref="member">queueRear</ref>)<sp/><ref refid="publictransportationscheduler_8cpp_1a62ee68cd3e3392b4bc821385889bede4" kindref="member">queueRear</ref>-&gt;<ref refid="struct_node_1af67b110ca1a258b793bf69d306929b22" kindref="member">next</ref><sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a62ee68cd3e3392b4bc821385889bede4" kindref="member">queueRear</ref><sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" kindref="member">queueFront</ref>)<sp/><ref refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" kindref="member">queueFront</ref><sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="publictransportationscheduler_8h_1ad6e0da35e82ee741ee4e9779fdf9e1c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1ad6e0da35e82ee741ee4e9779fdf9e1c9" kindref="member">dequeue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" kindref="member">queueFront</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" kindref="member">queueFront</ref>-&gt;<ref refid="struct_node_1a87c003c9f600e3fc58e6e90835f0b605" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="struct_node" kindref="compound">Node</ref><sp/>*temp<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" kindref="member">queueFront</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" kindref="member">queueFront</ref><sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" kindref="member">queueFront</ref>-&gt;<ref refid="struct_node_1af67b110ca1a258b793bf69d306929b22" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" kindref="member">queueFront</ref>)<sp/><ref refid="publictransportationscheduler_8cpp_1a62ee68cd3e3392b4bc821385889bede4" kindref="member">queueRear</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>free(temp);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Priority<sp/>Queue<sp/>(Heap)<sp/>Implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[100];</highlight></codeline>
<codeline lineno="345" refid="publictransportationscheduler_8cpp_1a50a655d085f2d580459b7e05b2774217" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a50a655d085f2d580459b7e05b2774217" kindref="member">heapSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="publictransportationscheduler_8h_1a3f05f3efe9a5a4aa7daaee5fc4d2ebce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a3f05f3efe9a5a4aa7daaee5fc4d2ebce" kindref="member">insertHeap</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1a50a655d085f2d580459b7e05b2774217" kindref="member">heapSize</ref>++;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&amp;&amp;<sp/>data<sp/>&lt;<sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[(i<sp/>-<sp/>1)<sp/>/<sp/>2])<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[i]<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[(i<sp/>-<sp/>1)<sp/>/<sp/>2];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(i<sp/>-<sp/>1)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[i]<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="publictransportationscheduler_8h_1a8641221dc62558605a4b4921ec89a3e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a8641221dc62558605a4b4921ec89a3e6" kindref="member">extractMin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="publictransportationscheduler_8cpp_1a50a655d085f2d580459b7e05b2774217" kindref="member">heapSize</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref><sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[0];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[0]<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[--<ref refid="publictransportationscheduler_8cpp_1a50a655d085f2d580459b7e05b2774217" kindref="member">heapSize</ref>];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(2<sp/>*<sp/>i<sp/>+<sp/>1<sp/>&lt;<sp/><ref refid="publictransportationscheduler_8cpp_1a50a655d085f2d580459b7e05b2774217" kindref="member">heapSize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>2<sp/>*<sp/>i<sp/>+<sp/>1,<sp/>right<sp/>=<sp/>2<sp/>*<sp/>i<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallest<sp/>=<sp/>(right<sp/>&lt;<sp/><ref refid="publictransportationscheduler_8cpp_1a50a655d085f2d580459b7e05b2774217" kindref="member">heapSize</ref><sp/>&amp;&amp;<sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[right]<sp/>&lt;<sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[left])<sp/>?<sp/>right<sp/>:<sp/>left;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[i]<sp/>&lt;=<sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[smallest])<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[i];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[i]<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[smallest];</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a11dd6f6b2588b3ddc417348e6a7f0f04" kindref="member">heap</ref>[smallest]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>smallest;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BFS<sp/>and<sp/>DFS<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="publictransportationscheduler_8h_1a1f9e130c21127e918f9cd652c28960af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a1f9e130c21127e918f9cd652c28960af" kindref="member">bfs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startNode)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a011d1d2e69488147446e6abf4df9acb4" kindref="member">enqueue</ref>(startNode);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;BFS<sp/>starting<sp/>from<sp/>node<sp/>%d:\n&quot;</highlight><highlight class="normal">,<sp/>startNode);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8cpp_1ab4131c72082d15b4a70c831b67b715ec" kindref="member">queueFront</ref>)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNode<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1ad6e0da35e82ee741ee4e9779fdf9e1c9" kindref="member">dequeue</ref>();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>currentNode);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Komşu<sp/>düğümleri<sp/>kuyruk<sp/>yapısına<sp/>ekleyebilirsiniz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="publictransportationscheduler_8h_1a0d63cfae7795f2aeb269ea111bc0c997" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a0d63cfae7795f2aeb269ea111bc0c997" kindref="member">dfs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startNode)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a9235f768e511383f117f41ab92d601f6" kindref="member">push</ref>(startNode);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;DFS<sp/>starting<sp/>from<sp/>node<sp/>%d:\n&quot;</highlight><highlight class="normal">,<sp/>startNode);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8cpp_1ac232cfd15d91df8dea8435d3522824ca" kindref="member">stack</ref>)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentNode<sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1a163177f1a0b7d847bc3241809dafc097" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>currentNode);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Komşu<sp/>düğümleri<sp/>yığına<sp/>ekleyebilirsiniz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Huffman<sp/>Coding<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="publictransportationscheduler_8h_1a1501a9df250a3e79e2ec3498c7a65499" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a1501a9df250a3e79e2ec3498c7a65499" kindref="member">compressDataHuffman</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Data<sp/>compressed<sp/>using<sp/>Huffman<sp/>coding.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Huffman<sp/>encoding<sp/>algorithm<sp/>implementation<sp/>can<sp/>be<sp/>added<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="publictransportationscheduler_8h_1a32369377e1d95d2063b21cde84df5866" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a32369377e1d95d2063b21cde84df5866" kindref="member">decompressDataHuffman</ref>()<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Data<sp/>decompressed<sp/>using<sp/>Huffman<sp/>coding.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Huffman<sp/>decoding<sp/>algorithm<sp/>implementation<sp/>can<sp/>be<sp/>added<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMP<sp/>Algorithm<sp/>for<sp/>text<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="publictransportationscheduler_8h_1acb3232bc0e9ef9e48324e06e627676c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1acb3232bc0e9ef9e48324e06e627676c0" kindref="member">KMPSearch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pattern,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>strlen(pattern);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(text);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lps<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc(m<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>LPS<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>LPS<sp/>array<sp/>for<sp/>the<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>lps[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>m;)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern[i]<sp/>==<sp/>pattern[j])<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lps[i++]<sp/>=<sp/>++j;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>lps[j<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lps[i++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>for<sp/>the<sp/>pattern<sp/>in<sp/>the<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern[j]<sp/>==<sp/>text[i])<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Pattern<sp/>found<sp/>at<sp/>index<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>i<sp/>-<sp/>j);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>lps[j<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>pattern[j]<sp/>!=<sp/>text[i])<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>j<sp/>?<sp/>lps[j<sp/>-<sp/>1]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>free(lps);<sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>dynamically<sp/>allocated<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>User<sp/>Authentication<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="publictransportationscheduler_8h_1a7464a341010bc5e28caeda8fbbc74def" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a7464a341010bc5e28caeda8fbbc74def" kindref="member">loadUserDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>fopen_s(&amp;file,<sp/></highlight><highlight class="stringliteral">&quot;userDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(&amp;<ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(<ref refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" kindref="member">userDatabase</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_user" kindref="compound">User</ref>),<sp/><ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>,<sp/>file);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="publictransportationscheduler_8h_1a9c04dff0438032d46ae97d3c76ef88a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a9c04dff0438032d46ae97d3c76ef88a4" kindref="member">saveUserDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>fopen_s(&amp;file,<sp/></highlight><highlight class="stringliteral">&quot;userDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>fwrite(&amp;<ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>fwrite(<ref refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" kindref="member">userDatabase</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_user" kindref="compound">User</ref>),<sp/><ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>,<sp/>file);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="publictransportationscheduler_8h_1a378330dd86baa7420fe4ed0147845c55" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a378330dd86baa7420fe4ed0147845c55" kindref="member">login</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*username,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*password)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a7464a341010bc5e28caeda8fbbc74def" kindref="member">loadUserDatabase</ref>();</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(<ref refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" kindref="member">userDatabase</ref>[i].username,<sp/>username)<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(<ref refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" kindref="member">userDatabase</ref>[i].password,<sp/>password)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Login<sp/>successful.<sp/>Redirecting<sp/>to<sp/>main<sp/>menu...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>username<sp/>or<sp/>password.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="publictransportationscheduler_8h_1a2954b6e11695b7a4b9c9fc2df4ecd21d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a2954b6e11695b7a4b9c9fc2df4ecd21d" kindref="member">registerUser</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*username,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*password)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a7464a341010bc5e28caeda8fbbc74def" kindref="member">loadUserDatabase</ref>();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(<ref refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" kindref="member">userDatabase</ref>[i].username,<sp/>username)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Username<sp/>already<sp/>exists.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>strcpy_s(<ref refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" kindref="member">userDatabase</ref>[<ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>].username,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" kindref="member">userDatabase</ref>[<ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>].username),<sp/>username);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>strcpy_s(<ref refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" kindref="member">userDatabase</ref>[<ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>].password,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="publictransportationscheduler_8cpp_1a6c68ab7eeb51eacf52b7c4c9475fea02" kindref="member">userDatabase</ref>[<ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>].password),<sp/>password);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a23424c8ba4bf5c99fbb09f4d86787465" kindref="member">userCount</ref>++;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a9c04dff0438032d46ae97d3c76ef88a4" kindref="member">saveUserDatabase</ref>();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;User<sp/>registered<sp/>successfully.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Automatically<sp/>log<sp/>in<sp/>after<sp/>successful<sp/>registration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8cpp_1a378330dd86baa7420fe4ed0147845c55" kindref="member">login</ref>(username,<sp/>password))<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Login<sp/>successful.<sp/>Redirecting<sp/>to<sp/>main<sp/>menu...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Login<sp/>failed<sp/>after<sp/>registration.\n&quot;</highlight><highlight class="normal">,<ref refid="publictransportationscheduler_8cpp_1a378330dd86baa7420fe4ed0147845c55" kindref="member">login</ref>);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Band<sp/>and<sp/>Artist<sp/>Management<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="568" refid="publictransportationscheduler_8h_1afcfbe032666cbafc1c70209d8119d996" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1afcfbe032666cbafc1c70209d8119d996" kindref="member">loadBandDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>fopen_s(&amp;file,<sp/></highlight><highlight class="stringliteral">&quot;bandDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(&amp;<ref refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" kindref="member">bandCount</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(<ref refid="publictransportationscheduler_8cpp_1a27218c54b53aecae57c119ea795dbd4d" kindref="member">bandDatabase</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_band" kindref="compound">Band</ref>),<sp/><ref refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" kindref="member">bandCount</ref>,<sp/>file);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="publictransportationscheduler_8h_1a92fd4511b9f726d102b69f09c9ee2e2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a92fd4511b9f726d102b69f09c9ee2e2a" kindref="member">saveBandDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>fopen_s(&amp;file,<sp/></highlight><highlight class="stringliteral">&quot;bandDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>fwrite(&amp;<ref refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" kindref="member">bandCount</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>fwrite(<ref refid="publictransportationscheduler_8cpp_1a27218c54b53aecae57c119ea795dbd4d" kindref="member">bandDatabase</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_band" kindref="compound">Band</ref>),<sp/><ref refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" kindref="member">bandCount</ref>,<sp/>file);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="594" refid="publictransportationscheduler_8h_1a6358fabef3ecd2e6c604fb9c839b7f84" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a6358fabef3ecd2e6c604fb9c839b7f84" kindref="member">addBand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/>NULL<sp/>||<sp/>strlen(name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Band<sp/>name<sp/>cannot<sp/>be<sp/>empty.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>strcpy_s(<ref refid="publictransportationscheduler_8cpp_1a27218c54b53aecae57c119ea795dbd4d" kindref="member">bandDatabase</ref>[<ref refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" kindref="member">bandCount</ref>].name,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="publictransportationscheduler_8cpp_1a27218c54b53aecae57c119ea795dbd4d" kindref="member">bandDatabase</ref>[<ref refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" kindref="member">bandCount</ref>].name),<sp/>name);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" kindref="member">bandCount</ref>++;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Band/Artist<sp/>%s<sp/>added.\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="610" refid="publictransportationscheduler_8h_1a60b614018039aa27af5ec0a05f8ff322" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a60b614018039aa27af5ec0a05f8ff322" kindref="member">editBand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*oldName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newName)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" kindref="member">bandCount</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(<ref refid="publictransportationscheduler_8cpp_1a27218c54b53aecae57c119ea795dbd4d" kindref="member">bandDatabase</ref>[i].name,<sp/>oldName)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Güncellenen<sp/>adı<sp/>bandDatabase<sp/>dizisine<sp/>kaydet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<ref refid="publictransportationscheduler_8cpp_1a27218c54b53aecae57c119ea795dbd4d" kindref="member">bandDatabase</ref>[i].name,<sp/>newName);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Band/Artist<sp/>%s<sp/>updated<sp/>to<sp/>%s.\n&quot;</highlight><highlight class="normal">,<sp/>oldName,<sp/>newName);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Band/Artist<sp/>%s<sp/>not<sp/>found.\n&quot;</highlight><highlight class="normal">,<sp/>oldName);</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="publictransportationscheduler_8h_1aced0e53ac2e52b903d66fdd4549329a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1aced0e53ac2e52b903d66fdd4549329a9" kindref="member">viewBands</ref>()<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1afcfbe032666cbafc1c70209d8119d996" kindref="member">loadBandDatabase</ref>();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Band<sp/>and<sp/>Artist<sp/>List:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="publictransportationscheduler_8cpp_1a81c5a0e1739c09f5b2a1aa37d16f7361" kindref="member">bandCount</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="publictransportationscheduler_8cpp_1a27218c54b53aecae57c119ea795dbd4d" kindref="member">bandDatabase</ref>[i].name);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Schedule<sp/>Management<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="644" refid="publictransportationscheduler_8cpp_1a3ec3918c87d436416f26edbb978bb9f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a3ec3918c87d436416f26edbb978bb9f0" kindref="member">editSchedule</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scheduleID,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newBandName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newDate)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><ref refid="struct_schedule_node" kindref="compound">ScheduleNode</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref>;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_schedule_node_1a6e532fc45a4a05e79ea39ba6a370f43e" kindref="member">scheduleID</ref><sp/>==<sp/>scheduleID)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(current-&gt;<ref refid="struct_schedule_node_1ae1c0a80f6177207a72d7752d4dd6f111" kindref="member">bandName</ref>,<sp/>newBandName);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(current-&gt;<ref refid="struct_schedule_node_1ab34965d2efa8e734256641f4730bf598" kindref="member">date</ref>,<sp/>newDate);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Schedule<sp/>%d<sp/>updated<sp/>to<sp/>band<sp/>%s<sp/>on<sp/>%s.\n&quot;</highlight><highlight class="normal">,<sp/>scheduleID,<sp/>newBandName,<sp/>newDate);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Schedule<sp/>ID<sp/>%d<sp/>not<sp/>found.\n&quot;</highlight><highlight class="normal">,<sp/>scheduleID);</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="publictransportationscheduler_8h_1a54a7f7463b7df104dc158361dd0aef52" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a54a7f7463b7df104dc158361dd0aef52" kindref="member">viewSchedules</ref>()<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><ref refid="struct_schedule_node" kindref="compound">ScheduleNode</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref>;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Festival<sp/>Lineup:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ID:<sp/>%d<sp/>|<sp/>Band:<sp/>%s<sp/>|<sp/>Date:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>current-&gt;<ref refid="struct_schedule_node_1a6e532fc45a4a05e79ea39ba6a370f43e" kindref="member">scheduleID</ref>,<sp/>current-&gt;<ref refid="struct_schedule_node_1ae1c0a80f6177207a72d7752d4dd6f111" kindref="member">bandName</ref>,<sp/>current-&gt;<ref refid="struct_schedule_node_1ab34965d2efa8e734256641f4730bf598" kindref="member">date</ref>);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>schedules<sp/>available.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="683" refid="publictransportationscheduler_8cpp_1abfe2afb819030beec59b91b1483a2ac9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1abfe2afb819030beec59b91b1483a2ac9" kindref="member">deleteSchedule</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scheduleID)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><ref refid="struct_schedule_node" kindref="compound">ScheduleNode</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref>;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_schedule_node_1a6e532fc45a4a05e79ea39ba6a370f43e" kindref="member">scheduleID</ref><sp/>==<sp/>scheduleID)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_schedule_node_1af15a1f81bcfea7395104937d412bc4e6" kindref="member">prev</ref>)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_schedule_node_1af15a1f81bcfea7395104937d412bc4e6" kindref="member">prev</ref>-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref><sp/>=<sp/>current-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref><sp/>=<sp/>current-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref>;<sp/></highlight><highlight class="comment">//<sp/>Deleting<sp/>the<sp/>head<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref>)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref>-&gt;<ref refid="struct_schedule_node_1af15a1f81bcfea7395104937d412bc4e6" kindref="member">prev</ref><sp/>=<sp/>current-&gt;<ref refid="struct_schedule_node_1af15a1f81bcfea7395104937d412bc4e6" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(current);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Schedule<sp/>with<sp/>ID<sp/>%d<sp/>deleted.\n&quot;</highlight><highlight class="normal">,<sp/>scheduleID);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Schedule<sp/>ID<sp/>%d<sp/>not<sp/>found.\n&quot;</highlight><highlight class="normal">,<sp/>scheduleID);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="publictransportationscheduler_8h_1a6875d46c583ce6dfdc9dc0da41efa85b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a6875d46c583ce6dfdc9dc0da41efa85b" kindref="member">loadScheduleDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>fopen_s(&amp;file,<sp/></highlight><highlight class="stringliteral">&quot;scheduleDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(&amp;count,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scheduleID;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bandName[50];</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>date[20];</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(&amp;scheduleID,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(bandName,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bandName),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(date,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(date),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a9c118366e46568179ae5af5d22abad21" kindref="member">createSchedule</ref>(scheduleID,<sp/>bandName,<sp/>date);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Could<sp/>not<sp/>open<sp/>file<sp/>for<sp/>reading.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="743" refid="publictransportationscheduler_8h_1a9c118366e46568179ae5af5d22abad21" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a9c118366e46568179ae5af5d22abad21" kindref="member">createSchedule</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scheduleID,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bandName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*date)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><ref refid="struct_schedule_node" kindref="compound">ScheduleNode</ref><sp/>*newNode<sp/>=<sp/>(<ref refid="struct_schedule_node" kindref="compound">ScheduleNode</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_schedule_node" kindref="compound">ScheduleNode</ref>));</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_schedule_node_1a6e532fc45a4a05e79ea39ba6a370f43e" kindref="member">scheduleID</ref><sp/>=<sp/>scheduleID;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>strcpy(newNode-&gt;<ref refid="struct_schedule_node_1ae1c0a80f6177207a72d7752d4dd6f111" kindref="member">bandName</ref>,<sp/>bandName);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>strcpy(newNode-&gt;<ref refid="struct_schedule_node_1ab34965d2efa8e734256641f4730bf598" kindref="member">date</ref>,<sp/>date);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref><sp/>=<sp/><ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref>;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_schedule_node_1af15a1f81bcfea7395104937d412bc4e6" kindref="member">prev</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref>-&gt;<ref refid="struct_schedule_node_1af15a1f81bcfea7395104937d412bc4e6" kindref="member">prev</ref><sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref><sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Schedule<sp/>created<sp/>for<sp/>%s<sp/>on<sp/>%s.\n&quot;</highlight><highlight class="normal">,<sp/>bandName,<sp/>date);</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="762" refid="publictransportationscheduler_8h_1af254c2b4333b9bac57d59b111834014f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1af254c2b4333b9bac57d59b111834014f" kindref="member">saveScheduleDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>fopen_s(&amp;file,<sp/></highlight><highlight class="stringliteral">&quot;scheduleDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_schedule_node" kindref="compound">ScheduleNode</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref>;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>node<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(&amp;count,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>schedule<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1aeee5407776b4bdb0bf6db5bcd7387737" kindref="member">scheduleHead</ref>;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;(current-&gt;<ref refid="struct_schedule_node_1a6e532fc45a4a05e79ea39ba6a370f43e" kindref="member">scheduleID</ref>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(current-&gt;<ref refid="struct_schedule_node_1ae1c0a80f6177207a72d7752d4dd6f111" kindref="member">bandName</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(current-&gt;<ref refid="struct_schedule_node_1ae1c0a80f6177207a72d7752d4dd6f111" kindref="member">bandName</ref>),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(current-&gt;<ref refid="struct_schedule_node_1ab34965d2efa8e734256641f4730bf598" kindref="member">date</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(current-&gt;<ref refid="struct_schedule_node_1ab34965d2efa8e734256641f4730bf598" kindref="member">date</ref>),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_schedule_node_1aad56d1759a9eab88b3b3973851f59259" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Could<sp/>not<sp/>open<sp/>file<sp/>for<sp/>writing.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ticket<sp/>Sales<sp/>Tracking<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="801" refid="publictransportationscheduler_8cpp_1aeffc198935d210e3bbaf244809ca992c" refkind="member"><highlight class="normal"><ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref><sp/>*<ref refid="publictransportationscheduler_8cpp_1aeffc198935d210e3bbaf244809ca992c" kindref="member">createNode</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLeaf)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref><sp/>*newNode<sp/>=<sp/>(<ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref>));</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_b_plus_tree_node_1a35ca3a83ab062bf9687a0d37607e3f17" kindref="member">isLeaf</ref><sp/>=<sp/>isLeaf;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_b_plus_tree_node_1a7b81dce4b1107ca7e94fa0a3c623e56f" kindref="member">numKeys</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>newNode-&gt;<ref refid="struct_b_plus_tree_node_1a2a31f32577529ef0a66102a1d77001ab" kindref="member">next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/><ref refid="publictransportationscheduler_8h_1a3077ecca3770bdee50e6a17dfb55d002" kindref="member">MAX_KEYS</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode-&gt;<ref refid="struct_b_plus_tree_node_1acd77908e459e0dba6d2f78068d1620f9" kindref="member">children</ref>[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newNode;</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="819" refid="publictransportationscheduler_8h_1a2f41eed3a6bebcb110434e5874c74fba" refkind="member"><highlight class="normal"><ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref><sp/>*<ref refid="publictransportationscheduler_8cpp_1a2f41eed3a6bebcb110434e5874c74fba" kindref="member">searchBPlusTree</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>current-&gt;numKeys<sp/>&amp;&amp;<sp/>key<sp/>&gt;<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7f8f020ee553bc8b3c4f3432642c45cb" kindref="member">keys</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>current-&gt;numKeys<sp/>&amp;&amp;<sp/>key<sp/>==<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7f8f020ee553bc8b3c4f3432642c45cb" kindref="member">keys</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a5b910ba3c17ed47131dbe27806af93d1" kindref="member">sales</ref>[i];</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_b_plus_tree_node_1a35ca3a83ab062bf9687a0d37607e3f17" kindref="member">isLeaf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1acd77908e459e0dba6d2f78068d1620f9" kindref="member">children</ref>[i];</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="848" refid="publictransportationscheduler_8h_1a34f0d3361e53b7a66d6d3e4806d7c9a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a34f0d3361e53b7a66d6d3e4806d7c9a8" kindref="member">insertBPlusNode</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<sp/><ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref><sp/>*sale)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref><sp/>=<sp/><ref refid="publictransportationscheduler_8cpp_1aeffc198935d210e3bbaf244809ca992c" kindref="member">createNode</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref>-&gt;<ref refid="struct_b_plus_tree_node_1a7f8f020ee553bc8b3c4f3432642c45cb" kindref="member">keys</ref>[0]<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref>-&gt;<ref refid="struct_b_plus_tree_node_1a5b910ba3c17ed47131dbe27806af93d1" kindref="member">sales</ref>[0]<sp/>=<sp/>sale;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref>-&gt;<ref refid="struct_b_plus_tree_node_1a7b81dce4b1107ca7e94fa0a3c623e56f" kindref="member">numKeys</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref><sp/>*parent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!current-&gt;<ref refid="struct_b_plus_tree_node_1a35ca3a83ab062bf9687a0d37607e3f17" kindref="member">isLeaf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>current-&gt;numKeys<sp/>&amp;&amp;<sp/>key<sp/>&gt;<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7f8f020ee553bc8b3c4f3432642c45cb" kindref="member">keys</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1acd77908e459e0dba6d2f78068d1620f9" kindref="member">children</ref>[i];</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="struct_b_plus_tree_node_1a7b81dce4b1107ca7e94fa0a3c623e56f" kindref="member">numKeys</ref><sp/>&lt;<sp/><ref refid="publictransportationscheduler_8h_1a3077ecca3770bdee50e6a17dfb55d002" kindref="member">MAX_KEYS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7b81dce4b1107ca7e94fa0a3c623e56f" kindref="member">numKeys</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7f8f020ee553bc8b3c4f3432642c45cb" kindref="member">keys</ref>[i]<sp/>&gt;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7f8f020ee553bc8b3c4f3432642c45cb" kindref="member">keys</ref>[i<sp/>+<sp/>1]<sp/>=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7f8f020ee553bc8b3c4f3432642c45cb" kindref="member">keys</ref>[i];</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a5b910ba3c17ed47131dbe27806af93d1" kindref="member">sales</ref>[i<sp/>+<sp/>1]<sp/>=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a5b910ba3c17ed47131dbe27806af93d1" kindref="member">sales</ref>[i];</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7f8f020ee553bc8b3c4f3432642c45cb" kindref="member">keys</ref>[i<sp/>+<sp/>1]<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a5b910ba3c17ed47131dbe27806af93d1" kindref="member">sales</ref>[i<sp/>+<sp/>1]<sp/>=<sp/>sale;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7b81dce4b1107ca7e94fa0a3c623e56f" kindref="member">numKeys</ref>++;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="890" refid="publictransportationscheduler_8h_1a436bc8449c6d9e9b7b0b8a04d5c2bb77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a436bc8449c6d9e9b7b0b8a04d5c2bb77" kindref="member">displayBPlusTree</ref>(<ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref><sp/>*node)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>node-&gt;<ref refid="struct_b_plus_tree_node_1a7b81dce4b1107ca7e94fa0a3c623e56f" kindref="member">numKeys</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>node-&gt;<ref refid="struct_b_plus_tree_node_1a7f8f020ee553bc8b3c4f3432642c45cb" kindref="member">keys</ref>[i]);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;<ref refid="struct_b_plus_tree_node_1a35ca3a83ab062bf9687a0d37607e3f17" kindref="member">isLeaf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>node-&gt;<ref refid="struct_b_plus_tree_node_1a7b81dce4b1107ca7e94fa0a3c623e56f" kindref="member">numKeys</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a436bc8449c6d9e9b7b0b8a04d5c2bb77" kindref="member">displayBPlusTree</ref>(node-&gt;<ref refid="struct_b_plus_tree_node_1acd77908e459e0dba6d2f78068d1620f9" kindref="member">children</ref>[i]);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="909" refid="publictransportationscheduler_8h_1acad3ee31c17cb0696e8df858ac13465f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1acad3ee31c17cb0696e8df858ac13465f" kindref="member">initializeBPlusTree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="916" refid="publictransportationscheduler_8h_1a7ca5eb618ca02eba384a217adb2e3e70" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a7ca5eb618ca02eba384a217adb2e3e70" kindref="member">loadSalesDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>FILE<sp/>*file<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;salesDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>salesDatabase.bin<sp/>for<sp/>reading.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleCount;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>fread(&amp;sampleCount,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref><sp/>*sales<sp/>=<sp/>(<ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref><sp/>*)malloc(sampleCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref>));</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>fread(sales,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref>),<sp/>sampleCount,<sp/>file);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sampleCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a34f0d3361e53b7a66d6d3e4806d7c9a8" kindref="member">insertBPlusNode</ref>(sales[i].saleID,<sp/>&amp;sales[i]);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Sales<sp/>data<sp/>loaded<sp/>from<sp/>salesDatabase.bin<sp/>successfully.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="940" refid="publictransportationscheduler_8h_1ae32e1898a3a814a0bb5c26d4fcb68de2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1ae32e1898a3a814a0bb5c26d4fcb68de2" kindref="member">viewSalesData</ref>()<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Ticket<sp/>Sales<sp/>Data:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>sales<sp/>data<sp/>available.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>the<sp/>leftmost<sp/>leaf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!current-&gt;<ref refid="struct_b_plus_tree_node_1a35ca3a83ab062bf9687a0d37607e3f17" kindref="member">isLeaf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1acd77908e459e0dba6d2f78068d1620f9" kindref="member">children</ref>[0];</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>all<sp/>leaf<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7b81dce4b1107ca7e94fa0a3c623e56f" kindref="member">numKeys</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref><sp/>*sale<sp/>=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a5b910ba3c17ed47131dbe27806af93d1" kindref="member">sales</ref>[i];</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Sale<sp/>ID:<sp/>%d,<sp/>Type:<sp/>%s,<sp/>Amount:<sp/>%.2f,<sp/>Date:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sale-&gt;<ref refid="struct_ticket_sale_1ac9bb877a021b41e5387b511063ebd45e" kindref="member">saleID</ref>,<sp/>sale-&gt;<ref refid="struct_ticket_sale_1ab9de4a1e9f1c4fadd300d86148ac6894" kindref="member">ticketType</ref>,<sp/>sale-&gt;<ref refid="struct_ticket_sale_1aba94134a07d017f0c5e22bd6fb712c0d" kindref="member">amount</ref>,<sp/>sale-&gt;<ref refid="struct_ticket_sale_1afa8729907fb1575e81a8d61873b8c3ba" kindref="member">date</ref>);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a2a31f32577529ef0a66102a1d77001ab" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="969" refid="publictransportationscheduler_8cpp_1ae6aaf9b1c0a852ddeeed4e6f9dc818f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1ae6aaf9b1c0a852ddeeed4e6f9dc818f1" kindref="member">saveSampleSalesData</ref>()<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>FILE<sp/>*file<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;salesDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>file<sp/>for<sp/>writing.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref><sp/>sampleSales[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>{1,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">,<sp/>50.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-01&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>{2,<sp/></highlight><highlight class="stringliteral">&quot;Student&quot;</highlight><highlight class="normal">,<sp/>30.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-02&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>{3,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">,<sp/>45.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-03&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>{4,<sp/></highlight><highlight class="stringliteral">&quot;Student&quot;</highlight><highlight class="normal">,<sp/>25.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-04&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>{5,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">,<sp/>60.0,<sp/></highlight><highlight class="stringliteral">&quot;2024-11-05&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampleCount<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sampleSales)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sampleSales[0]);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>fwrite(&amp;sampleCount,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>fwrite(sampleSales,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_ticket_sale" kindref="compound">TicketSale</ref>),<sp/>sampleCount,<sp/>file);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Sample<sp/>sales<sp/>data<sp/>saved<sp/>to<sp/>salesDatabase.bin<sp/>successfully.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="994" refid="publictransportationscheduler_8h_1a52c3863e2808e63bc383d10064016abe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a52c3863e2808e63bc383d10064016abe" kindref="member">generateSalesReport</ref>()<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalAmount<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>normalCount<sp/>=<sp/>0,<sp/>studentCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><ref refid="struct_b_plus_tree_node" kindref="compound">BPlusTreeNode</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1a7e939d63c30c0a3095e349d7a88240ab" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>&amp;&amp;<sp/>!current-&gt;<ref refid="struct_b_plus_tree_node_1a35ca3a83ab062bf9687a0d37607e3f17" kindref="member">isLeaf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1acd77908e459e0dba6d2f78068d1620f9" kindref="member">children</ref>[0];</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a7b81dce4b1107ca7e94fa0a3c623e56f" kindref="member">numKeys</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>totalAmount<sp/>+=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a5b910ba3c17ed47131dbe27806af93d1" kindref="member">sales</ref>[i]-&gt;<ref refid="struct_ticket_sale_1aba94134a07d017f0c5e22bd6fb712c0d" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(current-&gt;<ref refid="struct_b_plus_tree_node_1a5b910ba3c17ed47131dbe27806af93d1" kindref="member">sales</ref>[i]-&gt;<ref refid="struct_ticket_sale_1ab9de4a1e9f1c4fadd300d86148ac6894" kindref="member">ticketType</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalCount++;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(current-&gt;<ref refid="struct_b_plus_tree_node_1a5b910ba3c17ed47131dbe27806af93d1" kindref="member">sales</ref>[i]-&gt;<ref refid="struct_ticket_sale_1ab9de4a1e9f1c4fadd300d86148ac6894" kindref="member">ticketType</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Student&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>studentCount++;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_b_plus_tree_node_1a2a31f32577529ef0a66102a1d77001ab" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Sales<sp/>Report:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>Sales<sp/>Amount:<sp/>%.2f\n&quot;</highlight><highlight class="normal">,<sp/>totalAmount);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>&apos;Normal&apos;<sp/>Tickets<sp/>Sold:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>normalCount);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>&apos;Student&apos;<sp/>Tickets<sp/>Sold:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>studentCount);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>Sales<sp/>Count:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="publictransportationscheduler_8cpp_1a92feea896317e1b65a94d3765aa24ada" kindref="member">salesCount</ref>);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vendor<sp/>Management<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032" refid="publictransportationscheduler_8cpp_1a46d5b27892b1949a92d1b5c3a4a0f490" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a46d5b27892b1949a92d1b5c3a4a0f490" kindref="member">addVendor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*serviceType)<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><ref refid="struct_vendor" kindref="compound">Vendor</ref><sp/>*newVendor<sp/>=<sp/>(<ref refid="struct_vendor" kindref="compound">Vendor</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vendor" kindref="compound">Vendor</ref>));</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>newVendor-&gt;<ref refid="struct_vendor_1a429ffb2ff9afc4df184d5028302ded3d" kindref="member">id</ref><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>strcpy(newVendor-&gt;<ref refid="struct_vendor_1a0e7d6abb02e20258baf69d63666d1793" kindref="member">name</ref>,<sp/>name);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>strcpy(newVendor-&gt;<ref refid="struct_vendor_1a072cfa231994ea8f28b2b1f189001596" kindref="member">serviceType</ref>,<sp/>serviceType);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>newVendor-&gt;<ref refid="struct_vendor_1af23998ef753c4ab0b2d8f4d781bf1540" kindref="member">next</ref><sp/>=<sp/><ref refid="publictransportationscheduler_8h_1af73a147133c11773d1887e0897af0b79" kindref="member">vendorListHead</ref>;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8h_1af73a147133c11773d1887e0897af0b79" kindref="member">vendorListHead</ref><sp/>=<sp/>newVendor;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047" refid="publictransportationscheduler_8cpp_1ac380e4c79f20a62c0bf76f4bd7717784" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1ac380e4c79f20a62c0bf76f4bd7717784" kindref="member">addSponsor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>contributionAmount)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><ref refid="struct_sponsor" kindref="compound">Sponsor</ref><sp/>*newSponsor<sp/>=<sp/>(<ref refid="struct_sponsor" kindref="compound">Sponsor</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_sponsor" kindref="compound">Sponsor</ref>));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>newSponsor-&gt;<ref refid="struct_sponsor_1ac52845ad9e257d80766134c258a4892a" kindref="member">id</ref><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>strcpy(newSponsor-&gt;<ref refid="struct_sponsor_1a41b238af3834b43678fa3891d1745cc9" kindref="member">name</ref>,<sp/>name);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>newSponsor-&gt;<ref refid="struct_sponsor_1a0126d50906bf99303d498d09f881fe4e" kindref="member">contributionAmount</ref><sp/>=<sp/>contributionAmount;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>newSponsor-&gt;<ref refid="struct_sponsor_1a46bf285b954e9fd93128296fc2b7067b" kindref="member">next</ref><sp/>=<sp/><ref refid="publictransportationscheduler_8h_1a981f0c84e6f00259bc2b7e14ee995b8a" kindref="member">sponsorListHead</ref>;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8h_1a981f0c84e6f00259bc2b7e14ee995b8a" kindref="member">sponsorListHead</ref><sp/>=<sp/>newSponsor;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059" refid="publictransportationscheduler_8h_1a0d6885f3029b75ce370431b95b54bf73" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a0d6885f3029b75ce370431b95b54bf73" kindref="member">saveVendorDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>fopen_s(&amp;file,<sp/></highlight><highlight class="stringliteral">&quot;vendorDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><ref refid="struct_vendor" kindref="compound">Vendor</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1af73a147133c11773d1887e0897af0b79" kindref="member">vendorListHead</ref>;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(current,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vendor" kindref="compound">Vendor</ref>),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_vendor_1af23998ef753c4ab0b2d8f4d781bf1540" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075" refid="publictransportationscheduler_8h_1ab7cac0638d8d265304799360555d9eec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1ab7cac0638d8d265304799360555d9eec" kindref="member">saveSponsorDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>fopen_s(&amp;file,<sp/></highlight><highlight class="stringliteral">&quot;sponsorDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><ref refid="struct_sponsor" kindref="compound">Sponsor</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1a981f0c84e6f00259bc2b7e14ee995b8a" kindref="member">sponsorListHead</ref>;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(current,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_sponsor" kindref="compound">Sponsor</ref>),<sp/>1,<sp/>file);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_sponsor_1a46bf285b954e9fd93128296fc2b7067b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091" refid="publictransportationscheduler_8h_1a9478ff5b539d7d0ea768b43bb0b2a57b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a9478ff5b539d7d0ea768b43bb0b2a57b" kindref="member">loadVendorDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>fopen_s(&amp;file,<sp/></highlight><highlight class="stringliteral">&quot;vendorDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vendor" kindref="compound">Vendor</ref><sp/>temp;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fread(&amp;temp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vendor" kindref="compound">Vendor</ref>),<sp/>1,<sp/>file))<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a46d5b27892b1949a92d1b5c3a4a0f490" kindref="member">addVendor</ref>(temp.<ref refid="struct_vendor_1a429ffb2ff9afc4df184d5028302ded3d" kindref="member">id</ref>,<sp/>temp.<ref refid="struct_vendor_1a0e7d6abb02e20258baf69d63666d1793" kindref="member">name</ref>,<sp/>temp.<ref refid="struct_vendor_1a072cfa231994ea8f28b2b1f189001596" kindref="member">serviceType</ref>);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109" refid="publictransportationscheduler_8h_1afc050fc76e7ac7bca437021f3842254a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1afc050fc76e7ac7bca437021f3842254a" kindref="member">loadSponsorDatabase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>FILE<sp/>*file;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>fopen_s(&amp;file,<sp/></highlight><highlight class="stringliteral">&quot;sponsorDatabase.bin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sponsor" kindref="compound">Sponsor</ref><sp/>temp;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fread(&amp;temp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_sponsor" kindref="compound">Sponsor</ref>),<sp/>1,<sp/>file))<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1ac380e4c79f20a62c0bf76f4bd7717784" kindref="member">addSponsor</ref>(temp.<ref refid="struct_sponsor_1ac52845ad9e257d80766134c258a4892a" kindref="member">id</ref>,<sp/>temp.<ref refid="struct_sponsor_1a41b238af3834b43678fa3891d1745cc9" kindref="member">name</ref>,<sp/>temp.<ref refid="struct_sponsor_1a0126d50906bf99303d498d09f881fe4e" kindref="member">contributionAmount</ref>);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127" refid="publictransportationscheduler_8h_1a22e477b1167ee3a1a1fb74af23c4a4c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a22e477b1167ee3a1a1fb74af23c4a4c1" kindref="member">addVendorMenu</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[50];</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>serviceType[50];</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Enter<sp/>Vendor<sp/>ID:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>scanf(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Enter<sp/>Vendor<sp/>Name:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>scanf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Enter<sp/>Service<sp/>Type:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>scanf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>serviceType);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a46d5b27892b1949a92d1b5c3a4a0f490" kindref="member">addVendor</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>name,<sp/>serviceType);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a0d6885f3029b75ce370431b95b54bf73" kindref="member">saveVendorDatabase</ref>();</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Vendor<sp/>added<sp/>and<sp/>saved<sp/>successfully.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145" refid="publictransportationscheduler_8h_1a05db9accf57963aae5e0da727b8b21d7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a05db9accf57963aae5e0da727b8b21d7" kindref="member">addSponsorMenu</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[50];</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>contributionAmount;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Enter<sp/>Sponsor<sp/>ID:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>scanf(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Enter<sp/>Sponsor<sp/>Name:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>scanf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Enter<sp/>Contribution<sp/>Amount:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>scanf(</highlight><highlight class="stringliteral">&quot;%lf&quot;</highlight><highlight class="normal">,<sp/>&amp;contributionAmount);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1ac380e4c79f20a62c0bf76f4bd7717784" kindref="member">addSponsor</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>name,<sp/>contributionAmount);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1ab7cac0638d8d265304799360555d9eec" kindref="member">saveSponsorDatabase</ref>();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Sponsor<sp/>added<sp/>and<sp/>saved<sp/>successfully.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163" refid="publictransportationscheduler_8h_1a707153d90df4a85d7b79bb0e2ac84561" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a707153d90df4a85d7b79bb0e2ac84561" kindref="member">manageVendors</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1a9478ff5b539d7d0ea768b43bb0b2a57b" kindref="member">loadVendorDatabase</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>latest<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><ref refid="struct_vendor" kindref="compound">Vendor</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1af73a147133c11773d1887e0897af0b79" kindref="member">vendorListHead</ref>;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Vendors<sp/>List:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ID:<sp/>%d<sp/>|<sp/>Name:<sp/>%s<sp/>|<sp/>Service:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>current-&gt;<ref refid="struct_vendor_1a429ffb2ff9afc4df184d5028302ded3d" kindref="member">id</ref>,<sp/>current-&gt;<ref refid="struct_vendor_1a0e7d6abb02e20258baf69d63666d1793" kindref="member">name</ref>,<sp/>current-&gt;<ref refid="struct_vendor_1a072cfa231994ea8f28b2b1f189001596" kindref="member">serviceType</ref>);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_vendor_1af23998ef753c4ab0b2d8f4d781bf1540" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177" refid="publictransportationscheduler_8h_1a47bb57a4772b96184408e7b601c028dc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="publictransportationscheduler_8cpp_1a47bb57a4772b96184408e7b601c028dc" kindref="member">trackSponsors</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><ref refid="publictransportationscheduler_8cpp_1afc050fc76e7ac7bca437021f3842254a" kindref="member">loadSponsorDatabase</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>latest<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><ref refid="struct_sponsor" kindref="compound">Sponsor</ref><sp/>*current<sp/>=<sp/><ref refid="publictransportationscheduler_8h_1a981f0c84e6f00259bc2b7e14ee995b8a" kindref="member">sponsorListHead</ref>;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Sponsors<sp/>List:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ID:<sp/>%d<sp/>|<sp/>Name:<sp/>%s<sp/>|<sp/>Contribution:<sp/>%.2f\n&quot;</highlight><highlight class="normal">,<sp/>current-&gt;<ref refid="struct_sponsor_1ac52845ad9e257d80766134c258a4892a" kindref="member">id</ref>,<sp/>current-&gt;<ref refid="struct_sponsor_1a41b238af3834b43678fa3891d1745cc9" kindref="member">name</ref>,<sp/>current-&gt;<ref refid="struct_sponsor_1a0126d50906bf99303d498d09f881fe4e" kindref="member">contributionAmount</ref>);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_sponsor_1a46bf285b954e9fd93128296fc2b7067b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/publictransportationscheduler/src/publictransportationscheduler.cpp"/>
  </compounddef>
</doxygen>
